diff -uNr riscv-gnu-toolchain/riscv-binutils/gas/config/tc-riscv.c lisc-gnu-toolchain/riscv-binutils/gas/config/tc-riscv.c
--- riscv-gnu-toolchain/riscv-binutils/gas/config/tc-riscv.c	2018-09-21 13:26:25.919693359 +0800
+++ lisc-gnu-toolchain/riscv-binutils/gas/config/tc-riscv.c	2018-09-21 13:44:49.474855260 +0800
@@ -674,6 +674,7 @@
 	  case 'm': used_bits |= ENCODE_RVC_LWSP_IMM (-1U); break;
 	  case 'n': used_bits |= ENCODE_RVC_LDSP_IMM (-1U); break;
 	  case 'p': used_bits |= ENCODE_RVC_B_IMM (-1U); break;
+	  case 'd': USE_BITS (OP_MASK_CRD, OP_SH_CRD); break;	/* lisc ,RD在I和C中的起始位置不同，增加Cd作特殊判断*/
 	  case 's': USE_BITS (OP_MASK_CRS1S, OP_SH_CRS1S); break;
 	  case 't': USE_BITS (OP_MASK_CRS2S, OP_SH_CRS2S); break;
 	  case 'u': used_bits |= ENCODE_RVC_IMM (-1U); break;
@@ -717,7 +718,7 @@
       case '>':	USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
       case 'A': break;
       case 'D':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
-      case 'Z':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;
+      case 'Z':	USE_BITS (OP_MASK_ZIMM5,		OP_SH_ZIMM5);	break; /* lisc对csrrwi等系统指令中的Zimm5做了修改，riscv做了rs1的复用*/
       case 'E':	USE_BITS (OP_MASK_CSR,		OP_SH_CSR);	break;
       case 'I': break;
       case 'R':	USE_BITS (OP_MASK_RS3,		OP_SH_RS3);	break;
@@ -725,8 +726,10 @@
       case 'U':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	/* fallthru */
       case 'T':	USE_BITS (OP_MASK_RS2,		OP_SH_RS2);	break;
       case 'd':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
+			//case 'd':	USE_BITS (OP_MASK_CRD,		OP_SH_CRD);	break;/* lisc */
       case 'm':	USE_BITS (OP_MASK_RM,		OP_SH_RM);	break;
       case 's':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;
+			//case 's':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;/* lisc */
       case 't':	USE_BITS (OP_MASK_RS2,		OP_SH_RS2);	break;
       case 'r':	USE_BITS (OP_MASK_RS3,          OP_SH_RS3);     break;
       case 'P':	USE_BITS (OP_MASK_PRED,		OP_SH_PRED); break;
@@ -766,6 +769,31 @@
 	     return FALSE;
 	  }
 	break;
+      /* lisc */
+ //     case 'b': 
+//		if (*p == '1') {
+//			used_bits |= ENCODE_ITYPE_IMM(-1U); /* For loop I type pc rel displacement */
+//			++p; break;
+//		} else if (*p == '2') {
+//			used_bits |= ENCODE_I1TYPE_UIMM(-1U); /* For loop I1 type pc rel displacement */
+//			++p; break;
+//		} else if (*p == '3') {
+//			used_bits |= ENCODE_I1TYPE_UIMM(-1U); /* For scallimm  */
+//			++p; break;
+//		} else if (*p == '5') {
+//			used_bits |= ENCODE_I5TYPE_UIMM(-1U);
+//			++p; break;
+//		} else if (*p == 'i') {
+//			used_bits |= ENCODE_I5_1_TYPE_UIMM(-1U);
+//			++p; break;
+//		} else if (*p == 'I') {
+//			used_bits |= ENCODE_I5_1_TYPE_IMM(-1U);
+//			++p; break;
+//		} else if (*p == 's' || *p == 'u' || *p == 'U' || *p == 'f' || *p == 'F') {
+//			used_bits |= ENCODE_I6TYPE_IMM(-1U);
+//			++p; break;
+//		}
+      /* end lisc */
       default:
 	as_bad (_("internal: bad RISC-V opcode "
 		  "(unknown operand type `%c'): %s %s"),
@@ -775,7 +803,7 @@
 #undef USE_BITS
   if (used_bits != required_bits)
     {
-      as_bad (_("internal: bad RISC-V opcode (bits 0x%lx undefined): %s %s"),
+      as_bad (_("internal: bad RISC-V opcode (bits 0x%lx undefined-sk): %s %s"),
 	      ~(unsigned long)(used_bits & required_bits),
 	      opc->name, opc->args);
       return FALSE;
@@ -1535,7 +1563,7 @@
 		  continue;
 		case 'U': /* RS1, constrained to equal RD.  */
 		  if (!reg_lookup (&s, RCLASS_GPR, &regno)
-		      || EXTRACT_OPERAND (RD, ip->insn_opcode) != regno)
+		      || EXTRACT_OPERAND (CRD, ip->insn_opcode) != regno)
 		    break;
 		  continue;
 		case 'V': /* RS2 */
@@ -1543,6 +1571,11 @@
 		    break;
 		  INSERT_OPERAND (CRS2, *ip, regno);
 		  continue;
+		case 'd': /* RD *, lisc rd in LISC32C is different to rd in LISC32I*/
+		  if (!reg_lookup (&s, RCLASS_GPR, &regno))
+		    break;
+		  INSERT_OPERAND (CRD, *ip, regno);
+		  continue;
 		case 'c': /* RS1, constrained to equal sp.  */
 		  if (!reg_lookup (&s, RCLASS_GPR, &regno)
 		      || regno != X_SP)
diff -uNr riscv-gnu-toolchain/riscv-binutils/include/opcode/riscv.h lisc-gnu-toolchain/riscv-binutils/include/opcode/riscv.h
--- riscv-gnu-toolchain/riscv-binutils/include/opcode/riscv.h	2018-09-21 13:26:28.035647505 +0800
+++ lisc-gnu-toolchain/riscv-binutils/include/opcode/riscv.h	2018-09-21 13:44:51.354807524 +0800
@@ -31,11 +31,14 @@
 {
   if ((insn & 0x3) != 0x3) /* RVC.  */
     return 2;
-  if ((insn & 0x1f) != 0x1f) /* Base ISA and extensions in 32-bit space.  */
+  //if ((insn & 0x1f) != 0x1f) /* Base ISA and extensions in 32-bit space.  */
+  if ((insn & 0xff) != 0xff) /* LISC  */
     return 4;
-  if ((insn & 0x3f) == 0x1f) /* 48-bit extensions.  */
+  //if ((insn & 0x3f) == 0x1f) /* 48-bit extensions.  */
+  if ((insn & 0x1ff) == 0xff) /* LISC  */
     return 6;
-  if ((insn & 0x7f) == 0x3f) /* 64-bit extensions.  */
+  //if ((insn & 0x7f) == 0x3f) /* 64-bit extensions.  */
+  if ((insn & 0x3ff) == 0x1ff) /* LISC  */
     return 8;
   /* Longer instructions not supported at the moment.  */
   return 2;
@@ -59,18 +62,26 @@
 #define RVC_BRANCH_REACH ((1ULL << RVC_BRANCH_BITS) * RISCV_BRANCH_ALIGN)
 
 #define RV_X(x, s, n)  (((x) >> (s)) & ((1 << (n)) - 1))
-#define RV_IMM_SIGN(x) (-(((x) >> 31) & 1))
+//#define RV_IMM_SIGN(x) (-(((x) >> 31) & 1))
+#define RV_IMM_SIGN(x, e) (-(((x) >> e) & 1))
 
 #define EXTRACT_ITYPE_IMM(x) \
-  (RV_X(x, 20, 12) | (RV_IMM_SIGN(x) << 12))
+    (RV_X(x, 12, 12) | (RV_IMM_SIGN(x, 23) << 12))
+//  (RV_X(x, 20, 12) | (RV_IMM_SIGN(x) << 12))
 #define EXTRACT_STYPE_IMM(x) \
-  (RV_X(x, 7, 5) | (RV_X(x, 25, 7) << 5) | (RV_IMM_SIGN(x) << 12))
+  (RV_X(x, 12, 8) | (RV_X(x, 8, 4) << 8) | (RV_IMM_SIGN(x,11) << 12))
+//  (RV_X(x, 7, 5) | (RV_X(x, 25, 7) << 5) | (RV_IMM_SIGN(x) << 12))
 #define EXTRACT_SBTYPE_IMM(x) \
-  ((RV_X(x, 8, 4) << 1) | (RV_X(x, 25, 6) << 5) | (RV_X(x, 7, 1) << 11) | (RV_IMM_SIGN(x) << 12))
+  ((RV_X(x, 13, 7) << 1) | (RV_X(x, 8, 4) << 8) | (RV_X(x, 12, 1) << 12) | (RV_IMM_SIGN(x, 12) << 13))
+//  ((RV_X(x, 8, 4) << 1) | (RV_X(x, 25, 6) << 5) | (RV_X(x, 7, 1) << 11) | (RV_IMM_SIGN(x) << 12))
 #define EXTRACT_UTYPE_IMM(x) \
-  ((RV_X(x, 12, 20) << 12) | (RV_IMM_SIGN(x) << 32))
+  ((RV_X(x, 12, 20) << 12) | (RV_IMM_SIGN(x,31) << 32))
+//  ((RV_X(x, 12, 20) << 12) | (RV_IMM_SIGN(x) << 32))
 #define EXTRACT_UJTYPE_IMM(x) \
-  ((RV_X(x, 21, 10) << 1) | (RV_X(x, 20, 1) << 11) | (RV_X(x, 12, 8) << 12) | (RV_IMM_SIGN(x) << 20))
+  ((RV_X(x, 13, 15) << 1) | (RV_X(x, 8, 4) << 16) | (RV_X(x, 12, 1) << 20) | (RV_IMM_SIGN(x, 12) << 21))
+//  ((RV_X(x, 21, 10) << 1) | (RV_X(x, 20, 1) << 11) | (RV_X(x, 12, 8) << 12) | (RV_IMM_SIGN(x) << 20))
+
+
 #define EXTRACT_RVC_IMM(x) \
   (RV_X(x, 2, 5) | (-RV_X(x, 12, 1) << 5))
 #define EXTRACT_RVC_LUI_IMM(x) \
@@ -100,16 +111,45 @@
 #define EXTRACT_RVC_J_IMM(x) \
   ((RV_X(x, 3, 3) << 1) | (RV_X(x, 11, 1) << 4) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 7, 1) << 6) | (RV_X(x, 6, 1) << 7) | (RV_X(x, 9, 2) << 8) | (RV_X(x, 8, 1) << 10) | (-RV_X(x, 12, 1) << 11))
 
+/* lisc */
+#define EXTRACT_I1TYPE_UIMM(x) \
+  (RV_X(x, 24, 5) )
+#define EXTRACT_I6TYPE_IMM(x) \
+  ((RV_X(x, 20, 5)<<1)|RV_X(x, 25, 1))
+#define EXTRACT_I5TYPE_UIMM(x) \
+  (RV_X(x, 25, 5))
+#define EXTRACT_I5_1_TYPE_UIMM(x) \
+  (RV_X(x, 20, 5))
+#define EXTRACT_I5_1_TYPE_IMM(x) \
+  (RV_X(x, 20, 5))
+
+#define ENCODE_I1TYPE_UIMM(x) \
+  (RV_X(x, 0, 5) << 24)
+#define ENCODE_I6TYPE_IMM(x) \
+  ((RV_X(x, 1, 5)<<20)|(RV_X(x, 0, 1)<<25))
+#define ENCODE_I5TYPE_UIMM(x) \
+  (RV_X(x, 0, 5) << 25)
+#define ENCODE_I5_1_TYPE_UIMM(x) \
+  (RV_X(x, 0, 5) << 20)
+#define ENCODE_I5_1_TYPE_IMM(x) \
+  (RV_X(x, 0, 5) << 20)
+/* end lisc */
+
 #define ENCODE_ITYPE_IMM(x) \
-  (RV_X(x, 0, 12) << 20)
+  (RV_X(x, 0, 12) << 12)
+//  (RV_X(x, 0, 12) << 20)
 #define ENCODE_STYPE_IMM(x) \
-  ((RV_X(x, 0, 5) << 7) | (RV_X(x, 5, 7) << 25))
+  ((RV_X(x, 0, 8) << 12) | (RV_X(x, 8, 4) << 8))
+//  ((RV_X(x, 0, 5) << 7) | (RV_X(x, 5, 7) << 25))
 #define ENCODE_SBTYPE_IMM(x) \
-  ((RV_X(x, 1, 4) << 8) | (RV_X(x, 5, 6) << 25) | (RV_X(x, 11, 1) << 7) | (RV_X(x, 12, 1) << 31))
+  ((RV_X(x, 1, 7) << 13) | (RV_X(x, 8, 4) << 8) | (RV_X(x, 12, 1) << 12) )
+//  ((RV_X(x, 1, 4) << 8) | (RV_X(x, 5, 6) << 25) | (RV_X(x, 11, 1) << 7) | (RV_X(x, 12, 1) << 31))
 #define ENCODE_UTYPE_IMM(x) \
   (RV_X(x, 12, 20) << 12)
 #define ENCODE_UJTYPE_IMM(x) \
-  ((RV_X(x, 1, 10) << 21) | (RV_X(x, 11, 1) << 20) | (RV_X(x, 12, 8) << 12) | (RV_X(x, 20, 1) << 31))
+  ((RV_X(x, 1, 15) << 13) | (RV_X(x, 16, 4) << 8) | (RV_X(x, 20, 1) << 12))
+//  ((RV_X(x, 1, 10) << 21) | (RV_X(x, 11, 1) << 20) | (RV_X(x, 12, 8) << 12) | (RV_X(x, 20, 1) << 31))
+
 #define ENCODE_RVC_IMM(x) \
   ((RV_X(x, 0, 5) << 2) | (RV_X(x, 5, 1) << 12))
 #define ENCODE_RVC_LUI_IMM(x) \
@@ -158,6 +198,8 @@
 #define VALID_RVC_SDSP_IMM(x) (EXTRACT_RVC_SDSP_IMM(ENCODE_RVC_SDSP_IMM(x)) == (x))
 #define VALID_RVC_B_IMM(x) (EXTRACT_RVC_B_IMM(ENCODE_RVC_B_IMM(x)) == (x))
 #define VALID_RVC_J_IMM(x) (EXTRACT_RVC_J_IMM(ENCODE_RVC_J_IMM(x)) == (x))
+#define VALID_I1TYPE_UIMM(x) (EXTRACT_I1TYPE_UIMM(ENCODE_I1TYPE_UIMM(x)) == (x)) /* lisc */
+#define VALID_I6TYPE_IMM(x) (EXTRACT_I6TYPE_IMM(ENCODE_I6TYPE_IMM(x)) == (x))   /* lisc */
 
 #define RISCV_RTYPE(insn, rd, rs1, rs2) \
   ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2))
@@ -198,35 +240,87 @@
 
 /* RV fields.  */
 
-#define OP_MASK_OP		0x7f
+//#define OP_MASK_OP		0x7f
+#define OP_MASK_OP		0xff
 #define OP_SH_OP		0
-#define OP_MASK_RS2		0x1f
+//#define OP_MASK_RS2		0x1f
+#define OP_MASK_RS2		0xf
 #define OP_SH_RS2		20
-#define OP_MASK_RS1		0x1f
-#define OP_SH_RS1		15
-#define OP_MASK_RS3		0x1f
-#define OP_SH_RS3		27
-#define OP_MASK_RD		0x1f
-#define OP_SH_RD		7
-#define OP_MASK_SHAMT		0x3f
-#define OP_SH_SHAMT		20
+//#define OP_MASK_RS1		0x1f
+//#define OP_SH_RS1		15
+#define OP_MASK_RS1		0xf
+#define OP_SH_RS1		24
+//#define OP_MASK_RS3		0x1f
+//#define OP_SH_RS3		27
+//#define OP_MASK_RD		0x1f
+//#define OP_SH_RD		7
+#define OP_MASK_RD		0xf
+#define OP_SH_RD		8
+//#define OP_MASK_SHAMT		0x3f
+//#define OP_SH_SHAMT		20
 #define OP_MASK_SHAMTW		0x1f
-#define OP_SH_SHAMTW		20
-#define OP_MASK_RM		0x7
-#define OP_SH_RM		12
+//#define OP_SH_SHAMTW		20
+#define OP_SH_SHAMTW		16
+//#define OP_MASK_RM		0x7
+//#define OP_SH_RM		12
 #define OP_MASK_PRED		0xf
-#define OP_SH_PRED		24
+//#define OP_SH_PRED		24
+#define OP_SH_PRED		20
 #define OP_MASK_SUCC		0xf
-#define OP_SH_SUCC		20
+//#define OP_SH_SUCC		20
+#define OP_SH_SUCC		15
 #define OP_MASK_AQ		0x1
-#define OP_SH_AQ		26
+//#define OP_SH_AQ		26
+#define OP_SH_AQ		17
 #define OP_MASK_RL		0x1
-#define OP_SH_RL		25
+//#define OP_SH_RL		25
+#define OP_SH_RL		16
+
+/* lisc */
+#define OP_MASK_CLIP3		0x7
+#define OP_SH_CLIP3		29
+//#define OP_MASK_CLIP4		0xf
+//#define OP_SH_CLIP4		28
+#define OP_MASK_SHAMT3		0x7
+#define OP_SH_SHAMT3		21
+#define OP_MASK_CSR		0xfff
+#define OP_SH_CSR		12
+#define OP_MASK_IMM5		0x1f
+#define OP_SH_IMM5		24
+
+#define OP_SH_IMM12		12
+#define OP_MASK_C_11		0x1
+#define OP_SH_C_11		11
+#define OP_MASK_C_6		0x1
+#define OP_SH_C_6		6
+//#define OP_MASK_C_28		0x1
+//#define OP_SH_C_28		28
+
+#define OP_MASK_SHAMT		0x3f
+#define OP_SH_SHAMT		16
+#define OP_MASK_SHAMT2		0x3
+#define OP_MASK_SHAMT2		0x3
+#define OP_MASK_RM		0x7
+#define OP_SH_RM		12
+#define OP_MASK_RS3I            0x1f
+#define OP_SH_RS3I              16
+#define OP_MASK_RS3		0xf
+#define OP_SH_RS3		16
+
+#define OP_MASK_CCRS2		0x1f
+#define OP_SH_CCRS2		20
+#define OP_MASK_CRS1		0x1f
+#define OP_SH_CRS1		15
+#define OP_MASK_CRD 0xf /* RVC中Rd[7:10],第11位用C_11掩掉*/
+#define OP_SH_CRD 7
+#define OP_MASK_ZIMM5 0x1f
+#define OP_SH_ZIMM5 24
+/* end lisc */
 
 #define OP_MASK_CUSTOM_IMM	0x7f
 #define OP_SH_CUSTOM_IMM	25
-#define OP_MASK_CSR		0xfff
-#define OP_SH_CSR		20
+//#define OP_MASK_CSR		0xfff
+//#define OP_SH_CSR		20
 
 #define OP_MASK_FUNCT3         0x7
 #define OP_SH_FUNCT3           12
@@ -240,11 +334,11 @@
 #define OP_MASK_OP2            0x3
 #define OP_SH_OP2              0
 
-#define OP_MASK_CRS2 0x1f
+#define OP_MASK_CRS2 0xf  /* RVC:RS2[2:5] */
 #define OP_SH_CRS2 2
-#define OP_MASK_CRS1S 0x7
+#define OP_MASK_CRS1S 0x7 /* RVC:RS1'[7:9] */
 #define OP_SH_CRS1S 7
-#define OP_MASK_CRS2S 0x7
+#define OP_MASK_CRS2S 0x7 /* RVC:RS2'[2:4] */
 #define OP_SH_CRS2S 2
 
 #define OP_MASK_CFUNCT4                0xf
@@ -261,7 +355,8 @@
 #define X_T0 5
 #define X_T1 6
 #define X_T2 7
-#define X_T3 28
+//#define X_T3 28
+#define X_T3 8 /* LISC */
 
 #define NGPR 32
 #define NFPR 32
@@ -310,6 +405,18 @@
   unsigned long pinfo;
 };
 
+/* lisc */
+#define INSN_WRITE_GPR_D	0x00000001
+#define INSN_WRITE_GPR_RA	0x00000004
+#define INSN_WRITE_FPR_D	0x00000008
+#define INSN_READ_GPR_S		0x00000040
+#define INSN_READ_GPR_T		0x00000080
+#define INSN_READ_FPR_S		0x00000100
+#define INSN_READ_FPR_T		0x00000200
+#define INSN_READ_FPR_R		0x00000400
+#define INSN_READ_GPR_R		0x00000800
+/* end lisc */
+
 /* Instruction is a simple alias (e.g. "mv" for "addi").  */
 #define	INSN_ALIAS		0x00000001
 /* Instruction is actually a macro.  It should be ignored by the
diff -uNr riscv-gnu-toolchain/riscv-binutils/include/opcode/riscv-opc.h lisc-gnu-toolchain/riscv-binutils/include/opcode/riscv-opc.h
--- riscv-gnu-toolchain/riscv-binutils/include/opcode/riscv-opc.h	2018-09-21 13:26:28.035647505 +0800
+++ lisc-gnu-toolchain/riscv-binutils/include/opcode/riscv-opc.h	2018-09-21 13:44:51.934792801 +0800
@@ -23,80 +23,80 @@
 #define MASK_FSCSR  0xfff0707f
 #define MATCH_FRCSR 0x302073
 #define MASK_FRCSR  0xfffff07f
-#define MATCH_RDCYCLE 0xc0002073
-#define MASK_RDCYCLE  0xfffff07f
-#define MATCH_RDTIME 0xc0102073
-#define MASK_RDTIME  0xfffff07f
-#define MATCH_RDINSTRET 0xc0202073
-#define MASK_RDINSTRET  0xfffff07f
-#define MATCH_RDCYCLEH 0xc8002073
-#define MASK_RDCYCLEH  0xfffff07f
-#define MATCH_RDTIMEH 0xc8102073
-#define MASK_RDTIMEH  0xfffff07f
-#define MATCH_RDINSTRETH 0xc8202073
-#define MASK_RDINSTRETH  0xfffff07f
-#define MATCH_SCALL 0x73
-#define MASK_SCALL  0xffffffff
-#define MATCH_SBREAK 0x100073
-#define MASK_SBREAK  0xffffffff
-#define MATCH_BEQ 0x63
-#define MASK_BEQ  0x707f
-#define MATCH_BNE 0x1063
-#define MASK_BNE  0x707f
-#define MATCH_BLT 0x4063
-#define MASK_BLT  0x707f
-#define MATCH_BGE 0x5063
-#define MASK_BGE  0x707f
-#define MATCH_BLTU 0x6063
-#define MASK_BLTU  0x707f
-#define MATCH_BGEU 0x7063
-#define MASK_BGEU  0x707f
-#define MATCH_JALR 0x67
-#define MASK_JALR  0x707f
-#define MATCH_JAL 0x6f
-#define MASK_JAL  0x7f
-#define MATCH_LUI 0x37
-#define MASK_LUI  0x7f
-#define MATCH_AUIPC 0x17
-#define MASK_AUIPC  0x7f
-#define MATCH_ADDI 0x13
-#define MASK_ADDI  0x707f
-#define MATCH_SLLI 0x1013
-#define MASK_SLLI  0xfc00707f
-#define MATCH_SLTI 0x2013
-#define MASK_SLTI  0x707f
-#define MATCH_SLTIU 0x3013
-#define MASK_SLTIU  0x707f
-#define MATCH_XORI 0x4013
-#define MASK_XORI  0x707f
-#define MATCH_SRLI 0x5013
-#define MASK_SRLI  0xfc00707f
-#define MATCH_SRAI 0x40005013
-#define MASK_SRAI  0xfc00707f
-#define MATCH_ORI 0x6013
-#define MASK_ORI  0x707f
-#define MATCH_ANDI 0x7013
-#define MASK_ANDI  0x707f
-#define MATCH_ADD 0x33
-#define MASK_ADD  0xfe00707f
-#define MATCH_SUB 0x40000033
-#define MASK_SUB  0xfe00707f
-#define MATCH_SLL 0x1033
-#define MASK_SLL  0xfe00707f
-#define MATCH_SLT 0x2033
-#define MASK_SLT  0xfe00707f
-#define MATCH_SLTU 0x3033
-#define MASK_SLTU  0xfe00707f
-#define MATCH_XOR 0x4033
-#define MASK_XOR  0xfe00707f
-#define MATCH_SRL 0x5033
-#define MASK_SRL  0xfe00707f
-#define MATCH_SRA 0x40005033
-#define MASK_SRA  0xfe00707f
-#define MATCH_OR 0x6033
-#define MASK_OR  0xfe00707f
-#define MATCH_AND 0x7033
-#define MASK_AND  0xfe00707f
+//#define MATCH_RDCYCLE 0xc0002073
+//#define MASK_RDCYCLE  0xfffff07f
+//#define MATCH_RDTIME 0xc0102073
+//#define MASK_RDTIME  0xfffff07f
+//#define MATCH_RDINSTRET 0xc0202073
+//#define MASK_RDINSTRET  0xfffff07f
+//#define MATCH_RDCYCLEH 0xc8002073
+//#define MASK_RDCYCLEH  0xfffff07f
+//#define MATCH_RDTIMEH 0xc8102073
+//#define MASK_RDTIMEH  0xfffff07f
+//#define MATCH_RDINSTRETH 0xc8202073
+//#define MASK_RDINSTRETH  0xfffff07f
+//#define MATCH_SCALL 0x73
+//#define MASK_SCALL  0xffffffff
+//#define MATCH_SBREAK 0x100073
+//#define MASK_SBREAK  0xffffffff
+//#define MATCH_BEQ 0x63
+//#define MASK_BEQ  0x707f
+//#define MATCH_BNE 0x1063
+//#define MASK_BNE  0x707f
+//#define MATCH_BLT 0x4063
+//#define MASK_BLT  0x707f
+//#define MATCH_BGE 0x5063
+//#define MASK_BGE  0x707f
+//#define MATCH_BLTU 0x6063
+//#define MASK_BLTU  0x707f
+//#define MATCH_BGEU 0x7063
+//#define MASK_BGEU  0x707f
+//#define MATCH_JALR 0x67
+//#define MASK_JALR  0x707f
+//#define MATCH_JAL 0x6f
+//#define MASK_JAL  0x7f
+//#define MATCH_LUI 0x37
+//#define MASK_LUI  0x7f
+//#define MATCH_AUIPC 0x17
+//#define MASK_AUIPC  0x7f
+//#define MATCH_ADDI 0x13
+//#define MASK_ADDI  0x707f
+//#define MATCH_SLLI 0x1013
+//#define MASK_SLLI  0xfc00707f
+//#define MATCH_SLTI 0x2013
+//#define MASK_SLTI  0x707f
+//#define MATCH_SLTIU 0x3013
+//#define MASK_SLTIU  0x707f
+//#define MATCH_XORI 0x4013
+//#define MASK_XORI  0x707f
+//#define MATCH_SRLI 0x5013
+//#define MASK_SRLI  0xfc00707f
+//#define MATCH_SRAI 0x40005013
+//#define MASK_SRAI  0xfc00707f
+//#define MATCH_ORI 0x6013
+//#define MASK_ORI  0x707f
+//#define MATCH_ANDI 0x7013
+//#define MASK_ANDI  0x707f
+//#define MATCH_ADD 0x33
+//#define MASK_ADD  0xfe00707f
+//#define MATCH_SUB 0x40000033
+//#define MASK_SUB  0xfe00707f
+//#define MATCH_SLL 0x1033
+//#define MASK_SLL  0xfe00707f
+//#define MATCH_SLT 0x2033
+//#define MASK_SLT  0xfe00707f
+//#define MATCH_SLTU 0x3033
+//#define MASK_SLTU  0xfe00707f
+//#define MATCH_XOR 0x4033
+//#define MASK_XOR  0xfe00707f
+//#define MATCH_SRL 0x5033
+//#define MASK_SRL  0xfe00707f
+//#define MATCH_SRA 0x40005033
+//#define MASK_SRA  0xfe00707f
+//#define MATCH_OR 0x6033
+//#define MASK_OR  0xfe00707f
+//#define MATCH_AND 0x7033
+//#define MASK_AND  0xfe00707f
 #define MATCH_ADDIW 0x1b
 #define MASK_ADDIW  0x707f
 #define MATCH_SLLIW 0x101b
@@ -115,48 +115,48 @@
 #define MASK_SRLW  0xfe00707f
 #define MATCH_SRAW 0x4000503b
 #define MASK_SRAW  0xfe00707f
-#define MATCH_LB 0x3
-#define MASK_LB  0x707f
-#define MATCH_LH 0x1003
-#define MASK_LH  0x707f
-#define MATCH_LW 0x2003
-#define MASK_LW  0x707f
+//#define MATCH_LB 0x3
+//#define MASK_LB  0x707f
+//#define MATCH_LH 0x1003
+//#define MASK_LH  0x707f
+//#define MATCH_LW 0x2003
+//#define MASK_LW  0x707f
 #define MATCH_LD 0x3003
 #define MASK_LD  0x707f
-#define MATCH_LBU 0x4003
-#define MASK_LBU  0x707f
-#define MATCH_LHU 0x5003
-#define MASK_LHU  0x707f
+//#define MATCH_LBU 0x4003
+//#define MASK_LBU  0x707f
+//#define MATCH_LHU 0x5003
+//#define MASK_LHU  0x707f
 #define MATCH_LWU 0x6003
 #define MASK_LWU  0x707f
-#define MATCH_SB 0x23
-#define MASK_SB  0x707f
-#define MATCH_SH 0x1023
-#define MASK_SH  0x707f
-#define MATCH_SW 0x2023
-#define MASK_SW  0x707f
+//#define MATCH_SB 0x23
+//#define MASK_SB  0x707f
+//#define MATCH_SH 0x1023
+//#define MASK_SH  0x707f
+//#define MATCH_SW 0x2023
+//#define MASK_SW  0x707f
 #define MATCH_SD 0x3023
 #define MASK_SD  0x707f
-#define MATCH_FENCE 0xf
-#define MASK_FENCE  0x707f
-#define MATCH_FENCE_I 0x100f
-#define MASK_FENCE_I  0x707f
-#define MATCH_MUL 0x2000033
-#define MASK_MUL  0xfe00707f
-#define MATCH_MULH 0x2001033
-#define MASK_MULH  0xfe00707f
-#define MATCH_MULHSU 0x2002033
-#define MASK_MULHSU  0xfe00707f
-#define MATCH_MULHU 0x2003033
-#define MASK_MULHU  0xfe00707f
-#define MATCH_DIV 0x2004033
-#define MASK_DIV  0xfe00707f
-#define MATCH_DIVU 0x2005033
-#define MASK_DIVU  0xfe00707f
-#define MATCH_REM 0x2006033
-#define MASK_REM  0xfe00707f
-#define MATCH_REMU 0x2007033
-#define MASK_REMU  0xfe00707f
+//#define MATCH_FENCE 0xf
+//#define MASK_FENCE  0x707f
+//#define MATCH_FENCE_I 0x100f
+//#define MASK_FENCE_I  0x707f
+//#define MATCH_MUL 0x2000033
+//#define MASK_MUL  0xfe00707f
+//#define MATCH_MULH 0x2001033
+//#define MASK_MULH  0xfe00707f
+//#define MATCH_MULHSU 0x2002033
+//#define MASK_MULHSU  0xfe00707f
+//#define MATCH_MULHU 0x2003033
+//#define MASK_MULHU  0xfe00707f
+//#define MATCH_DIV 0x2004033
+//#define MASK_DIV  0xfe00707f
+//#define MATCH_DIVU 0x2005033
+//#define MASK_DIVU  0xfe00707f
+//#define MATCH_REM 0x2006033
+//#define MASK_REM  0xfe00707f
+//#define MATCH_REMU 0x2007033
+//#define MASK_REMU  0xfe00707f
 #define MATCH_MULW 0x200003b
 #define MASK_MULW  0xfe00707f
 #define MATCH_DIVW 0x200403b
@@ -211,38 +211,180 @@
 #define MASK_LR_D  0xf9f0707f
 #define MATCH_SC_D 0x1800302f
 #define MASK_SC_D  0xf800707f
-#define MATCH_ECALL 0x73
-#define MASK_ECALL  0xffffffff
-#define MATCH_EBREAK 0x100073
-#define MASK_EBREAK  0xffffffff
+//#define MATCH_ECALL 0x73
+//#define MASK_ECALL  0xffffffff
+//#define MATCH_EBREAK 0x100073
+//#define MASK_EBREAK  0xffffffff
 #define MATCH_URET 0x200073
 #define MASK_URET  0xffffffff
 #define MATCH_SRET 0x10200073
 #define MASK_SRET  0xffffffff
 #define MATCH_HRET 0x20200073
 #define MASK_HRET  0xffffffff
-#define MATCH_MRET 0x30200073
-#define MASK_MRET  0xffffffff
+//#define MATCH_MRET 0x30200073
+//#define MASK_MRET  0xffffffff
 #define MATCH_DRET 0x7b200073
 #define MASK_DRET  0xffffffff
 #define MATCH_SFENCE_VM 0x10400073
 #define MASK_SFENCE_VM  0xfff07fff
 #define MATCH_SFENCE_VMA 0x12000073
 #define MASK_SFENCE_VMA  0xfe007fff
-#define MATCH_WFI 0x10500073
+//#define MATCH_WFI 0x10500073
+//#define MASK_WFI  0xffffffff
+//#define MATCH_CSRRW 0x1073
+//#define MASK_CSRRW  0x707f
+//#define MATCH_CSRRS 0x2073
+//#define MASK_CSRRS  0x707f
+//#define MATCH_CSRRC 0x3073
+//#define MASK_CSRRC  0x707f
+//#define MATCH_CSRRWI 0x5073
+//#define MASK_CSRRWI  0x707f
+//#define MATCH_CSRRSI 0x6073
+//#define MASK_CSRRSI  0x707f
+//#define MATCH_CSRRCI 0x7073
+//#define MASK_CSRRCI  0x707f
+/* lisc */
+#define MATCH_ADD 0x3
+#define MASK_ADD  0x100ff0ff
+#define MATCH_SUB 0x8003
+#define MASK_SUB  0x100ff0ff
+#define MATCH_SLL 0x1003
+#define MASK_SLL  0x100ff0ff
+#define MATCH_SLT 0x2003
+#define MASK_SLT  0x100ff0ff
+#define MATCH_SLTU 0x3003
+#define MASK_SLTU  0x100ff0ff
+#define MATCH_XOR 0x4003
+#define MASK_XOR  0x100ff0ff
+#define MATCH_SRL 0x5003
+#define MASK_SRL  0x100ff0ff
+#define MATCH_SRA 0xd003
+#define MASK_SRA  0x100ff0ff
+#define MATCH_OR 0x6003
+#define MASK_OR  0x100ff0ff
+#define MATCH_AND 0x7003
+#define MASK_AND  0x100ff0ff
+#define MATCH_FENCE 0x80a3
+#define MASK_FENCE  0x1000f0ff
+#define MATCH_FENCE_I 0x90a3
+#define MASK_FENCE_I  0x1000f0ff
+#define MATCH_ADDI 0x7
+#define MASK_ADDI  0x100000ff
+#define MATCH_SLTI 0x47
+#define MASK_SLTI  0x100000ff
+#define MATCH_SLTIU 0x67
+#define MASK_SLTIU  0x100000ff
+#define MATCH_XORI 0x87
+#define MASK_XORI  0x100000ff
+#define MATCH_ORI 0xc7
+#define MASK_ORI  0x100000ff
+#define MATCH_ANDI 0xe7
+#define MASK_ANDI  0x100000ff
+#define MATCH_LB 0xb
+#define MASK_LB  0x100000ff
+#define MATCH_LH 0x2b
+#define MASK_LH  0x100000ff
+#define MATCH_LW 0x4b
+#define MASK_LW  0x100000ff
+#define MATCH_LBU 0x8b
+#define MASK_LBU  0x100000ff
+#define MATCH_LHU 0xab
+#define MASK_LHU  0x100000ff
+#define MATCH_JR 0xf3
+#define MASK_JR  0x10000fff
+#define MATCH_JALR 0x100000f3
+#define MASK_JALR  0x100000ff
+#define MATCH_SB 0xf
+#define MASK_SB  0x100000ff
+#define MATCH_SH 0x2f
+#define MASK_SH  0x100000ff
+#define MATCH_SW 0x4f
+#define MASK_SW  0x100000ff
+#define MATCH_BEQ 0x13
+#define MASK_BEQ  0x100000ff
+#define MATCH_BNE 0x33
+#define MASK_BNE  0x100000ff
+#define MATCH_BLT 0x53
+#define MASK_BLT  0x100000ff
+#define MATCH_BGE 0x73
+#define MASK_BGE  0x100000ff
+#define MATCH_BLTU 0x93
+#define MASK_BLTU  0x100000ff
+#define MATCH_BGEU 0xb3
+#define MASK_BGEU  0x100000ff
+#define MATCH_LUI 0x7f
+#define MASK_LUI  0xff
+#define MATCH_AUIPC 0x3f
+#define MASK_AUIPC  0xff
+#define MATCH_J 0xbf
+#define MASK_J  0x100000ff
+#define MATCH_JAL 0x100000bf
+#define MASK_JAL  0x100000ff
+#define MATCH_ECALL 0xfb
+#define MASK_ECALL  0xffffffff
+#define MATCH_EBREAK 0x10fb
+#define MASK_EBREAK  0xffffffff
+#define MATCH_CSRRW 0x200000fb
+#define MASK_CSRRW  0xf00000ff
+#define MATCH_CSRRS 0x400000fb
+#define MASK_CSRRS  0xf00000ff
+#define MATCH_CSRRC 0x600000fb
+#define MASK_CSRRC  0xf00000ff
+#define MATCH_CSRRWI 0xa00000fb
+#define MASK_CSRRWI  0xe00000ff
+#define MATCH_CSRRSI 0xc00000fb
+#define MASK_CSRRSI  0xe00000ff
+#define MATCH_CSRRCI 0xe00000fb
+#define MASK_CSRRCI  0xe00000ff
+#define MATCH_MRET 0x2600fb
+#define MASK_MRET  0xffffffff
+#define MATCH_WFI 0x5200fb
 #define MASK_WFI  0xffffffff
-#define MATCH_CSRRW 0x1073
-#define MASK_CSRRW  0x707f
-#define MATCH_CSRRS 0x2073
-#define MASK_CSRRS  0x707f
-#define MATCH_CSRRC 0x3073
-#define MASK_CSRRC  0x707f
-#define MATCH_CSRRWI 0x5073
-#define MASK_CSRRWI  0x707f
-#define MATCH_CSRRSI 0x6073
-#define MASK_CSRRSI  0x707f
-#define MATCH_CSRRCI 0x7073
-#define MASK_CSRRCI  0x707f
+#define MATCH_RDCYCLE 0x40c000fb
+#define MASK_RDCYCLE  0xfffff0ff
+#define MATCH_RDTIME 0x40c010fb
+#define MASK_RDTIME  0xfffff0ff
+#define MATCH_RDINSTRET 0x40c020fb
+#define MASK_RDINSTRET  0xfffff0ff
+#define MATCH_RDCYCLEH 0x40c800fb
+#define MASK_RDCYCLEH  0xfffff0ff
+#define MATCH_RDTIMEH 0x40c810fb
+#define MASK_RDTIMEH  0xfffff0ff
+#define MATCH_RDINSTRETH 0x40c820fb
+#define MASK_RDINSTRETH  0xfffff0ff
+#define MATCH_SCALL 0xfb
+#define MASK_SCALL  0xffffffff
+#define MASK_SCALL_IMM 0xe0ffffff
+#define MATCH_SBREAK 0x10fb
+#define MASK_SBREAK  0xffffffff
+#define MATCH_ERET 0x2600fb
+#define MASK_ERET  0xffffffff
+
+#define MATCH_SLLI 0x1083
+#define MASK_SLLI  0x10e0f0ff
+#define MATCH_SRLI 0x5083
+#define MASK_SRLI  0x10e0f0ff
+#define MATCH_SRAI 0xd083
+#define MASK_SRAI  0x10e0f0ff
+/* RVm */
+#define MATCH_MUL 0x10003
+#define MASK_MUL  0x100ff0ff
+#define MATCH_MULH 0x11003
+#define MASK_MULH  0x100ff0ff
+#define MATCH_MULHSU 0x12003
+#define MASK_MULHSU  0x100ff0ff
+#define MATCH_MULHU 0x13003
+#define MASK_MULHU  0x100ff0ff
+#define MATCH_DIV 0x14003
+#define MASK_DIV  0x100ff0ff
+#define MATCH_DIVU 0x15003
+#define MASK_DIVU  0x100ff0ff
+#define MATCH_REM 0x16003
+#define MASK_REM  0x100ff0ff
+#define MATCH_REMU 0x17003
+#define MASK_REMU  0x100ff0ff
+/* end lisc */
+
 #define MATCH_FADD_S 0x53
 #define MASK_FADD_S  0xfe00007f
 #define MATCH_FSUB_S 0x8000053
diff -uNr riscv-gnu-toolchain/riscv-binutils/opcodes/riscv-dis.c lisc-gnu-toolchain/riscv-binutils/opcodes/riscv-dis.c
--- riscv-gnu-toolchain/riscv-binutils/opcodes/riscv-dis.c	2018-09-21 13:26:28.795631033 +0800
+++ lisc-gnu-toolchain/riscv-binutils/opcodes/riscv-dis.c	2018-09-21 13:44:50.786821945 +0800
@@ -118,6 +118,7 @@
   struct riscv_private_data *pd = info->private_data;
   int rs1 = (l >> OP_SH_RS1) & OP_MASK_RS1;
   int rd = (l >> OP_SH_RD) & OP_MASK_RD;
+  int crd = (l >> OP_SH_CRD) & OP_MASK_CRD;/* lisc */
   fprintf_ftype print = info->fprintf_func;
 
   if (*d != '\0')
@@ -141,7 +142,7 @@
 		     riscv_gpr_names[EXTRACT_OPERAND (CRS2S, l) + 8]);
 	      break;
 	    case 'U': /* RS1, constrained to equal RD */
-	      print (info->stream, "%s", riscv_gpr_names[rd]);
+	      print (info->stream, "%s", riscv_gpr_names[crd]);
 	      break;
 	    case 'c': /* RS1, constrained to equal sp */
 	      print (info->stream, "%s", riscv_gpr_names[X_SP]);
@@ -150,6 +151,10 @@
 	      print (info->stream, "%s",
 		     riscv_gpr_names[EXTRACT_OPERAND (CRS2, l)]);
 	      break;
+	    case 'd': /* RD, lisc */
+	      print (info->stream, "%s",
+		     riscv_gpr_names[EXTRACT_OPERAND (CRD, l)]);
+	      break;
 	    case 'i':
 	      print (info->stream, "%d", (int)EXTRACT_RVC_SIMM3 (l));
 	      break;
diff -uNr riscv-gnu-toolchain/riscv-binutils/opcodes/riscv-opc.c lisc-gnu-toolchain/riscv-binutils/opcodes/riscv-opc.c
--- riscv-gnu-toolchain/riscv-binutils/opcodes/riscv-opc.c	2018-09-21 13:26:28.795631033 +0800
+++ lisc-gnu-toolchain/riscv-binutils/opcodes/riscv-opc.c	2018-09-21 13:44:50.218836367 +0800
@@ -65,6 +65,16 @@
 
    Because of the lookup algorithm used, entries with the same opcode
    name must be contiguous.  */
+/* lisc */
+#define WR_xd INSN_WRITE_GPR_D
+#define WR_fd INSN_WRITE_FPR_D
+#define RD_xs1 INSN_READ_GPR_S
+#define RD_xs2 INSN_READ_GPR_T
+#define RD_xs3 INSN_READ_GPR_R
+#define RD_fs1 INSN_READ_FPR_S
+#define RD_fs2 INSN_READ_FPR_T
+#define RD_fs3 INSN_READ_FPR_R
+/* end lisc */
 
 #define MASK_RS1 (OP_MASK_RS1 << OP_SH_RS1)
 #define MASK_RS2 (OP_MASK_RS2 << OP_SH_RS2)
@@ -79,6 +89,16 @@
 #define MASK_AQ (OP_MASK_AQ << OP_SH_AQ)
 #define MASK_RL (OP_MASK_RL << OP_SH_RL)
 #define MASK_AQRL (MASK_AQ | MASK_RL)
+/* lisc */
+#define MASK_CLIP3 ((unsigned long)OP_MASK_CLIP3 << OP_SH_CLIP3)
+//#define MASK_CLIP4 ((unsigned long)OP_MASK_CLIP4 << OP_SH_CLIP4)
+#define MASK_SHAMT3 (OP_MASK_SHAMT3 << OP_SH_SHAMT3)
+#define MASK_C_11 (OP_MASK_C_11 << OP_SH_C_11) /* lisc mask for 16 reg */
+#define MASK_C_6 (OP_MASK_C_6 << OP_SH_C_6) /* lisc mask for 16 reg */
+//#define MASK_C_28 (OP_MASK_C_28 << OP_SH_C_28) /* lisc mask for 16 reg */
+#define MASK_ZIMM5 (OP_MASK_ZIMM5 << OP_SH_ZIMM5) /* lisc mask for zImm5 */
+#define MASK_CRD (OP_MASK_CRD << OP_SH_CRD)
+/* end lisc */
 
 static int
 match_opcode (const struct riscv_opcode *op, insn_t insn)
@@ -100,7 +120,13 @@
   int rs2 = (insn & MASK_RS2) >> OP_SH_RS2;
   return match_opcode (op, insn) && rs1 == rs2;
 }
-
+/* lisc */
+static int
+match_crd_nonzero (const struct riscv_opcode *op, insn_t insn)
+{
+  return match_opcode (op, insn) && ((insn & MASK_CRD) != 0);//目的寄存器rd!=r0
+}
+/* end lisc */
 static int
 match_rd_nonzero (const struct riscv_opcode *op, insn_t insn)
 {
@@ -110,7 +136,8 @@
 static int
 match_c_add (const struct riscv_opcode *op, insn_t insn)
 {
-  return match_rd_nonzero (op, insn) && ((insn & MASK_CRS2) != 0);
+  //return match_rd_nonzero (op, insn) && ((insn & MASK_CRS2) != 0);
+  return match_crd_nonzero (op, insn) && ((insn & MASK_CRS2) != 0);
 }
 
 /* We don't allow mv zero,X to become a c.mv hint, so we need a separate
@@ -140,8 +167,10 @@
 static int
 match_c_lui (const struct riscv_opcode *op, insn_t insn)
 {
-  return (match_rd_nonzero (op, insn)
-	  && (((insn & MASK_RD) >> OP_SH_RD) != 2)
+  //return (match_rd_nonzero (op, insn)
+  return (match_crd_nonzero (op, insn)
+	  //&& (((insn & MASK_RD) >> OP_SH_RD) != 2)
+	  && (((insn & MASK_CRD) >> OP_SH_CRD) != 2)
 	  && EXTRACT_RVC_LUI_IMM (insn) != 0);
 }
 
@@ -175,7 +204,8 @@
 static int
 match_slli_as_c_slli (const struct riscv_opcode *op, insn_t insn)
 {
-  return match_rd_nonzero (op, insn) && EXTRACT_RVC_IMM (insn) != 0;
+  //return match_rd_nonzero (op, insn) && EXTRACT_RVC_IMM (insn) != 0;
+  return match_crd_nonzero (op, insn) && EXTRACT_RVC_IMM (insn) != 0;
 }
 
 /* This requires a zero shift.  A zero rd is a hint, so is allowed.  */
@@ -204,144 +234,144 @@
 {"ebreak",    "I",   "",    MATCH_EBREAK, MASK_EBREAK, match_opcode, 0 },
 {"sbreak",    "C",   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, INSN_ALIAS },
 {"sbreak",    "I",   "",    MATCH_EBREAK, MASK_EBREAK, match_opcode, INSN_ALIAS },
-{"ret",       "C",   "",  MATCH_C_JR | (X_RA << OP_SH_RD), MASK_C_JR | MASK_RD, match_opcode, INSN_ALIAS },
-{"ret",       "I",   "",  MATCH_JALR | (X_RA << OP_SH_RS1), MASK_JALR | MASK_RD | MASK_RS1 | MASK_IMM, match_opcode, INSN_ALIAS },
-{"jr",        "C",   "d",  MATCH_C_JR, MASK_C_JR, match_rd_nonzero, INSN_ALIAS },
-{"jr",        "I",   "s",  MATCH_JALR, MASK_JALR | MASK_RD | MASK_IMM, match_opcode, INSN_ALIAS },
-{"jr",        "I",   "o(s)",  MATCH_JALR, MASK_JALR | MASK_RD, match_opcode, INSN_ALIAS },
-{"jr",        "I",   "s,j",  MATCH_JALR, MASK_JALR | MASK_RD, match_opcode, INSN_ALIAS },
-{"jalr",      "C",   "d",  MATCH_C_JALR, MASK_C_JALR, match_rd_nonzero, INSN_ALIAS },
-{"jalr",      "I",   "s",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD | MASK_IMM, match_opcode, INSN_ALIAS },
-{"jalr",      "I",   "o(s)",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD, match_opcode, INSN_ALIAS },
-{"jalr",      "I",   "s,j",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD, match_opcode, INSN_ALIAS },
-{"jalr",      "I",   "d,s",  MATCH_JALR, MASK_JALR | MASK_IMM, match_opcode, INSN_ALIAS },
-{"jalr",      "I",   "d,o(s)",  MATCH_JALR, MASK_JALR, match_opcode, 0 },
-{"jalr",      "I",   "d,s,j",  MATCH_JALR, MASK_JALR, match_opcode, 0 },
+{"ret",       "C",   "",  MATCH_C_JR | (X_RA << OP_SH_CRD), MASK_C_JR | MASK_CRD | MASK_C_11, match_opcode, INSN_ALIAS },
+{"ret",       "I",   "",  MATCH_JALR | (X_RA << OP_SH_RS1), MASK_JALR | MASK_RD | MASK_RS1 | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jr",        "C",   "Cd",  MATCH_C_JR, MASK_C_JR | MASK_C_11, match_crd_nonzero, INSN_ALIAS },
+{"jr",        "I",   "s",  MATCH_JR, MASK_JR | MASK_IMM | MASK_CLIP3 , match_opcode, INSN_ALIAS },
+{"jr",        "I",   "o(s)",  MATCH_JR, MASK_JR | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jr",        "I",   "s,j",  MATCH_JR, MASK_JR | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jalr",      "C",   "Cd",  MATCH_C_JALR, MASK_C_JALR | MASK_C_11, match_crd_nonzero, INSN_ALIAS },
+{"jalr",      "I",   "s",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jalr",      "I",   "o(s)",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jalr",      "I",   "s,j",  MATCH_JALR | (X_RA << OP_SH_RD), MASK_JALR | MASK_RD | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jalr",      "I",   "d,s",  MATCH_JALR, MASK_JALR | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jalr",      "I",   "d,o(s)",  MATCH_JALR, MASK_JALR | MASK_CLIP3, match_opcode, 0 },
+{"jalr",      "I",   "d,s,j",  MATCH_JALR, MASK_JALR | MASK_CLIP3, match_opcode, 0 },
 {"j",         "C",   "Ca",  MATCH_C_J, MASK_C_J, match_opcode, INSN_ALIAS },
-{"j",         "I",   "a",  MATCH_JAL, MASK_JAL | MASK_RD, match_opcode, INSN_ALIAS },
-{"jal",       "I",   "d,a",  MATCH_JAL, MASK_JAL, match_opcode, 0 },
+{"j",         "I",   "a",  MATCH_J, MASK_J | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"jal",       "I",   "d,a",  MATCH_JAL, MASK_JAL| MASK_CLIP3, match_opcode, 0 },
 {"jal",       "32C", "Ca",  MATCH_C_JAL, MASK_C_JAL, match_opcode, INSN_ALIAS },
-{"jal",       "I",   "a",  MATCH_JAL | (X_RA << OP_SH_RD), MASK_JAL | MASK_RD, match_opcode, INSN_ALIAS },
+{"jal",       "I",   "a",  MATCH_JAL | (X_RA << OP_SH_RD), MASK_JAL | MASK_RD| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"call",      "I",   "d,c", (X_T1 << OP_SH_RS1), (int) M_CALL,  match_never, INSN_MACRO },
 {"call",      "I",   "c", (X_RA << OP_SH_RS1) | (X_RA << OP_SH_RD), (int) M_CALL,  match_never, INSN_MACRO },
 {"tail",      "I",   "c", (X_T1 << OP_SH_RS1), (int) M_CALL,  match_never, INSN_MACRO },
 {"jump",      "I",   "c,s", 0, (int) M_CALL,  match_never, INSN_MACRO },
 {"nop",       "C",   "",  MATCH_C_ADDI, 0xffff, match_opcode, INSN_ALIAS },
-{"nop",       "I",   "",         MATCH_ADDI, MASK_ADDI | MASK_RD | MASK_RS1 | MASK_IMM, match_opcode, INSN_ALIAS },
-{"lui",       "C",   "d,Cu",  MATCH_C_LUI, MASK_C_LUI, match_c_lui, INSN_ALIAS },
-{"lui",       "I",   "d,u",  MATCH_LUI, MASK_LUI, match_opcode, 0 },
-{"li",        "C",   "d,Cv",  MATCH_C_LUI, MASK_C_LUI, match_c_lui, INSN_ALIAS },
-{"li",        "C",   "d,Co",  MATCH_C_LI, MASK_C_LI, match_rd_nonzero, INSN_ALIAS },
-{"li",        "I",   "d,j",      MATCH_ADDI, MASK_ADDI | MASK_RS1, match_opcode, INSN_ALIAS }, /* addi */
+{"nop",       "I",   "",         MATCH_ADDI, MASK_ADDI | MASK_RD | MASK_RS1 | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"lui",       "C",   "Cd,Cu",  MATCH_C_LUI, MASK_C_LUI| MASK_C_11, match_c_lui, INSN_ALIAS },
+{"lui",       "I",   "d,u",  MATCH_LUI, MASK_LUI| MASK_CLIP3, match_opcode, 0 },
+{"li",        "C",   "Cd,Cv",  MATCH_C_LUI, MASK_C_LUI| MASK_C_11, match_c_lui, INSN_ALIAS },
+{"li",        "C",   "Cd,Co",  MATCH_C_LI, MASK_C_LI | MASK_C_11, match_rd_nonzero, INSN_ALIAS },
+{"li",        "I",   "d,j",      MATCH_ADDI, MASK_ADDI | MASK_RS1 | MASK_CLIP3, match_opcode, INSN_ALIAS }, /* addi */
 {"li",        "I",   "d,I",  0,    (int) M_LI,  match_never, INSN_MACRO },
-{"mv",        "C",   "d,CV",  MATCH_C_MV, MASK_C_MV, match_c_add, INSN_ALIAS },
-{"mv",        "I",   "d,s",  MATCH_ADDI, MASK_ADDI | MASK_IMM, match_opcode, INSN_ALIAS },
-{"move",      "C",   "d,CV",  MATCH_C_MV, MASK_C_MV, match_c_add, INSN_ALIAS },
-{"move",      "I",   "d,s",  MATCH_ADDI, MASK_ADDI | MASK_IMM, match_opcode, INSN_ALIAS },
+{"mv",        "C",   "Cd,CV",  MATCH_C_MV, MASK_C_MV | MASK_C_11 | MASK_C_6, match_c_add, INSN_ALIAS },
+{"mv",        "I",   "d,s",  MATCH_ADDI, MASK_ADDI | MASK_IMM| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"move",      "C",   "Cd,CV",  MATCH_C_MV, MASK_C_MV| MASK_C_11 | MASK_C_6, match_c_add, INSN_ALIAS },
+{"move",      "I",   "d,s",  MATCH_ADDI, MASK_ADDI | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"andi",      "C",   "Cs,Cw,Co",  MATCH_C_ANDI, MASK_C_ANDI, match_opcode, INSN_ALIAS },
-{"andi",      "I",   "d,s,j",  MATCH_ANDI, MASK_ANDI, match_opcode, 0 },
+{"andi",      "I",   "d,s,j",  MATCH_ANDI, MASK_ANDI | MASK_CLIP3, match_opcode, 0 },
 {"and",       "C",   "Cs,Cw,Ct",  MATCH_C_AND, MASK_C_AND, match_opcode, INSN_ALIAS },
 {"and",       "C",   "Cs,Ct,Cw",  MATCH_C_AND, MASK_C_AND, match_opcode, INSN_ALIAS },
 {"and",       "C",   "Cs,Cw,Co",  MATCH_C_ANDI, MASK_C_ANDI, match_opcode, INSN_ALIAS },
-{"and",       "I",   "d,s,t",  MATCH_AND, MASK_AND, match_opcode, 0 },
-{"and",       "I",   "d,s,j",  MATCH_ANDI, MASK_ANDI, match_opcode, INSN_ALIAS },
+{"and",       "I",   "d,s,t",  MATCH_AND, MASK_AND| MASK_CLIP3, match_opcode, 0 },
+{"and",       "I",   "d,s,j",  MATCH_ANDI, MASK_ANDI| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"beqz",      "C",   "Cs,Cp",  MATCH_C_BEQZ, MASK_C_BEQZ, match_opcode, INSN_ALIAS },
-{"beqz",      "I",   "s,p",  MATCH_BEQ, MASK_BEQ | MASK_RS2, match_opcode, INSN_ALIAS },
-{"beq",       "I",   "s,t,p",  MATCH_BEQ, MASK_BEQ, match_opcode, 0 },
-{"blez",      "I",   "t,p",  MATCH_BGE, MASK_BGE | MASK_RS1, match_opcode, INSN_ALIAS },
-{"bgez",      "I",   "s,p",  MATCH_BGE, MASK_BGE | MASK_RS2, match_opcode, INSN_ALIAS },
-{"ble",       "I",   "t,s,p",  MATCH_BGE, MASK_BGE, match_opcode, INSN_ALIAS },
-{"bleu",      "I",   "t,s,p",  MATCH_BGEU, MASK_BGEU, match_opcode, INSN_ALIAS },
-{"bge",       "I",   "s,t,p",  MATCH_BGE, MASK_BGE, match_opcode, 0 },
-{"bgeu",      "I",   "s,t,p",  MATCH_BGEU, MASK_BGEU, match_opcode, 0 },
-{"bltz",      "I",   "s,p",  MATCH_BLT, MASK_BLT | MASK_RS2, match_opcode, INSN_ALIAS },
-{"bgtz",      "I",   "t,p",  MATCH_BLT, MASK_BLT | MASK_RS1, match_opcode, INSN_ALIAS },
-{"blt",       "I",   "s,t,p",  MATCH_BLT, MASK_BLT, match_opcode, 0 },
-{"bltu",      "I",   "s,t,p",  MATCH_BLTU, MASK_BLTU, match_opcode, 0 },
-{"bgt",       "I",   "t,s,p",  MATCH_BLT, MASK_BLT, match_opcode, INSN_ALIAS },
-{"bgtu",      "I",   "t,s,p",  MATCH_BLTU, MASK_BLTU, match_opcode, INSN_ALIAS },
+{"beqz",      "I",   "s,p",  MATCH_BEQ, MASK_BEQ | MASK_RS2 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"beq",       "I",   "s,t,p",  MATCH_BEQ, MASK_BEQ  | MASK_CLIP3, match_opcode, 0 },
+{"blez",      "I",   "t,p",  MATCH_BGE, MASK_BGE | MASK_RS1 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bgez",      "I",   "s,p",  MATCH_BGE, MASK_BGE | MASK_RS2 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"ble",       "I",   "t,s,p",  MATCH_BGE, MASK_BGE | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bleu",      "I",   "t,s,p",  MATCH_BGEU, MASK_BGEU | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bge",       "I",   "s,t,p",  MATCH_BGE, MASK_BGE | MASK_CLIP3, match_opcode, 0 },
+{"bgeu",      "I",   "s,t,p",  MATCH_BGEU, MASK_BGEU | MASK_CLIP3, match_opcode, 0 },
+{"bltz",      "I",   "s,p",  MATCH_BLT, MASK_BLT | MASK_RS2 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bgtz",      "I",   "t,p",  MATCH_BLT, MASK_BLT | MASK_RS1 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"blt",       "I",   "s,t,p",  MATCH_BLT, MASK_BLT | MASK_CLIP3, match_opcode, 0 },
+{"bltu",      "I",   "s,t,p",  MATCH_BLTU, MASK_BLTU | MASK_CLIP3, match_opcode, 0 },
+{"bgt",       "I",   "t,s,p",  MATCH_BLT, MASK_BLT | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bgtu",      "I",   "t,s,p",  MATCH_BLTU, MASK_BLTU | MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"bnez",      "C",   "Cs,Cp",  MATCH_C_BNEZ, MASK_C_BNEZ, match_opcode, INSN_ALIAS },
-{"bnez",      "I",   "s,p",  MATCH_BNE, MASK_BNE | MASK_RS2, match_opcode, INSN_ALIAS },
-{"bne",       "I",   "s,t,p",  MATCH_BNE, MASK_BNE, match_opcode, 0 },
+{"bnez",      "I",   "s,p",  MATCH_BNE, MASK_BNE | MASK_RS2 | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"bne",       "I",   "s,t,p",  MATCH_BNE, MASK_BNE| MASK_CLIP3, match_opcode, 0 },
 {"addi",      "C",   "Ct,Cc,CK", MATCH_C_ADDI4SPN, MASK_C_ADDI4SPN, match_c_addi4spn, INSN_ALIAS },
-{"addi",      "C",   "d,CU,Cj",  MATCH_C_ADDI, MASK_C_ADDI, match_rd_nonzero, INSN_ALIAS },
-{"addi",      "C",   "d,CU,z",    MATCH_C_NOP, MASK_C_ADDI | MASK_RVC_IMM, match_c_nop, INSN_ALIAS },
+{"addi",      "C",   "Cd,CU,Cj",  MATCH_C_ADDI, MASK_C_ADDI | MASK_C_11, match_crd_nonzero, INSN_ALIAS },
+{"addi",      "C",   "Cd,CU,z",    MATCH_C_NOP, MASK_C_ADDI | MASK_RVC_IMM | MASK_C_11, match_c_nop, INSN_ALIAS },
 {"addi",      "C",   "Cc,Cc,CL", MATCH_C_ADDI16SP, MASK_C_ADDI16SP, match_c_addi16sp, INSN_ALIAS },
-{"addi",      "I",   "d,s,j",  MATCH_ADDI, MASK_ADDI, match_opcode, 0 },
-{"add",       "C",   "d,CU,CV",  MATCH_C_ADD, MASK_C_ADD, match_c_add, INSN_ALIAS },
-{"add",       "C",   "d,CV,CU",  MATCH_C_ADD, MASK_C_ADD, match_c_add, INSN_ALIAS },
-{"add",       "C",   "d,CU,Co",  MATCH_C_ADDI, MASK_C_ADDI, match_rd_nonzero, INSN_ALIAS },
+{"addi",      "I",   "d,s,j",  MATCH_ADDI, MASK_ADDI| MASK_CLIP3, match_opcode, 0 },
+{"add",       "C",   "Cd,CU,CV",  MATCH_C_ADD, MASK_C_ADD| MASK_C_11 | MASK_C_6, match_c_add, INSN_ALIAS },
+{"add",       "C",   "Cd,CV,CU",  MATCH_C_ADD, MASK_C_ADD| MASK_C_11 | MASK_C_6, match_c_add, INSN_ALIAS },
+{"add",       "C",   "Cd,CU,Co",  MATCH_C_ADDI, MASK_C_ADDI | MASK_C_11, match_crd_nonzero, INSN_ALIAS },
 {"add",       "C",   "Ct,Cc,CK", MATCH_C_ADDI4SPN, MASK_C_ADDI4SPN, match_c_addi4spn, INSN_ALIAS },
 {"add",       "C",   "Cc,Cc,CL", MATCH_C_ADDI16SP, MASK_C_ADDI16SP, match_c_addi16sp, INSN_ALIAS },
-{"add",       "I",   "d,s,t",  MATCH_ADD, MASK_ADD, match_opcode, 0 },
+{"add",       "I",   "d,s,t",  MATCH_ADD, MASK_ADD| MASK_CLIP3, match_opcode, 0 },
 /* This is used for TLS, where the fourth arg is %tprel_add, to get a reloc
    applied to an add instruction, for relaxation to use.  */
-{"add",       "I",   "d,s,t,0",MATCH_ADD, MASK_ADD, match_opcode, 0 },
-{"add",       "I",   "d,s,j",  MATCH_ADDI, MASK_ADDI, match_opcode, INSN_ALIAS },
+{"add",       "I",   "d,s,t,0",MATCH_ADD, MASK_ADD| MASK_CLIP3, match_opcode, 0 },
+{"add",       "I",   "d,s,j",  MATCH_ADDI, MASK_ADDI| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"la",        "I",   "d,B",  0,    (int) M_LA,  match_never, INSN_MACRO },
 {"lla",       "I",   "d,B",  0,    (int) M_LLA,  match_never, INSN_MACRO },
 {"la.tls.gd", "I",   "d,A",  0,    (int) M_LA_TLS_GD,  match_never, INSN_MACRO },
 {"la.tls.ie", "I",   "d,A",  0,    (int) M_LA_TLS_IE,  match_never, INSN_MACRO },
-{"neg",       "I",   "d,t",  MATCH_SUB, MASK_SUB | MASK_RS1, match_opcode, INSN_ALIAS }, /* sub 0 */
-{"slli",      "C",   "d,CU,C>",  MATCH_C_SLLI, MASK_C_SLLI, match_slli_as_c_slli, INSN_ALIAS },
-{"slli",      "I",   "d,s,>",   MATCH_SLLI, MASK_SLLI, match_opcode, 0 },
-{"sll",       "C",   "d,CU,C>",  MATCH_C_SLLI, MASK_C_SLLI, match_slli_as_c_slli, INSN_ALIAS },
-{"sll",       "I",   "d,s,t",   MATCH_SLL, MASK_SLL, match_opcode, 0 },
-{"sll",       "I",   "d,s,>",   MATCH_SLLI, MASK_SLLI, match_opcode, INSN_ALIAS },
+{"neg",       "I",   "d,t",  MATCH_SUB, MASK_SUB | MASK_RS1 | MASK_CLIP3, match_opcode, INSN_ALIAS }, /* sub 0 */
+{"slli",      "C",   "Cd,CU,C>",  MATCH_C_SLLI, MASK_C_SLLI| MASK_C_11, match_slli_as_c_slli, INSN_ALIAS },
+{"slli",      "I",   "d,s,>",   MATCH_SLLI, MASK_SLLI| MASK_CLIP3, match_opcode, 0 },
+{"sll",       "C",   "Cd,CU,C>",  MATCH_C_SLLI, MASK_C_SLLI| MASK_C_11, match_slli_as_c_slli, INSN_ALIAS },
+{"sll",       "I",   "d,s,t",   MATCH_SLL, MASK_SLL| MASK_CLIP3, match_opcode, 0 },
+{"sll",       "I",   "d,s,>",   MATCH_SLLI, MASK_SLLI| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"srli",      "C",   "Cs,Cw,C>",  MATCH_C_SRLI, MASK_C_SRLI, match_srxi_as_c_srxi, INSN_ALIAS },
-{"srli",      "I",   "d,s,>",   MATCH_SRLI, MASK_SRLI, match_opcode, 0 },
+{"srli",      "I",   "d,s,>",   MATCH_SRLI, MASK_SRLI| MASK_CLIP3, match_opcode, 0 },
 {"srl",       "C",   "Cs,Cw,C>",  MATCH_C_SRLI, MASK_C_SRLI, match_srxi_as_c_srxi, INSN_ALIAS },
-{"srl",       "I",   "d,s,t",   MATCH_SRL, MASK_SRL, match_opcode, 0 },
-{"srl",       "I",   "d,s,>",   MATCH_SRLI, MASK_SRLI, match_opcode, INSN_ALIAS },
+{"srl",       "I",   "d,s,t",   MATCH_SRL, MASK_SRL| MASK_CLIP3, match_opcode, 0 },
+{"srl",       "I",   "d,s,>",   MATCH_SRLI, MASK_SRLI| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"srai",      "C",   "Cs,Cw,C>",  MATCH_C_SRAI, MASK_C_SRAI, match_srxi_as_c_srxi, INSN_ALIAS },
-{"srai",      "I",   "d,s,>",   MATCH_SRAI, MASK_SRAI, match_opcode, 0 },
+{"srai",      "I",   "d,s,>",   MATCH_SRAI, MASK_SRAI| MASK_CLIP3, match_opcode, 0 },
 {"sra",       "C",   "Cs,Cw,C>",  MATCH_C_SRAI, MASK_C_SRAI, match_srxi_as_c_srxi, INSN_ALIAS },
-{"sra",       "I",   "d,s,t",   MATCH_SRA, MASK_SRA, match_opcode, 0 },
-{"sra",       "I",   "d,s,>",   MATCH_SRAI, MASK_SRAI, match_opcode, INSN_ALIAS },
+{"sra",       "I",   "d,s,t",   MATCH_SRA, MASK_SRA| MASK_CLIP3, match_opcode, 0 },
+{"sra",       "I",   "d,s,>",   MATCH_SRAI, MASK_SRAI| MASK_CLIP3, match_opcode, INSN_ALIAS },
 {"sub",       "C",   "Cs,Cw,Ct",  MATCH_C_SUB, MASK_C_SUB, match_opcode, INSN_ALIAS },
-{"sub",       "I",   "d,s,t",  MATCH_SUB, MASK_SUB, match_opcode, 0 },
-{"lb",        "I",   "d,o(s)",  MATCH_LB, MASK_LB, match_opcode, 0 },
+{"sub",       "I",   "d,s,t",  MATCH_SUB, MASK_SUB| MASK_CLIP3, match_opcode, 0 },
+{"lb",        "I",   "d,o(s)",  MATCH_LB, MASK_LB| MASK_CLIP3, match_opcode, 0 },
 {"lb",        "I",   "d,A",  0, (int) M_LB, match_never, INSN_MACRO },
-{"lbu",       "I",   "d,o(s)",  MATCH_LBU, MASK_LBU, match_opcode, 0 },
+{"lbu",       "I",   "d,o(s)",  MATCH_LBU, MASK_LBU| MASK_CLIP3, match_opcode, 0 },
 {"lbu",       "I",   "d,A",  0, (int) M_LBU, match_never, INSN_MACRO },
-{"lh",        "I",   "d,o(s)",  MATCH_LH, MASK_LH, match_opcode, 0 },
+{"lh",        "I",   "d,o(s)",  MATCH_LH, MASK_LH| MASK_CLIP3, match_opcode, 0 },
 {"lh",        "I",   "d,A",  0, (int) M_LH, match_never, INSN_MACRO },
-{"lhu",       "I",   "d,o(s)",  MATCH_LHU, MASK_LHU, match_opcode, 0 },
+{"lhu",       "I",   "d,o(s)",  MATCH_LHU, MASK_LHU| MASK_CLIP3, match_opcode, 0 },
 {"lhu",       "I",   "d,A",  0, (int) M_LHU, match_never, INSN_MACRO },
-{"lw",        "C",   "d,Cm(Cc)",  MATCH_C_LWSP, MASK_C_LWSP, match_rd_nonzero, INSN_ALIAS },
+{"lw",        "C",   "Cd,Cm(Cc)",  MATCH_C_LWSP, MASK_C_LWSP| MASK_C_11, match_crd_nonzero, INSN_ALIAS },
 {"lw",        "C",   "Ct,Ck(Cs)",  MATCH_C_LW, MASK_C_LW, match_opcode, INSN_ALIAS },
-{"lw",        "I",   "d,o(s)",  MATCH_LW, MASK_LW, match_opcode, 0 },
+{"lw",        "I",   "d,o(s)",  MATCH_LW, MASK_LW | MASK_CLIP3, match_opcode, 0 },
 {"lw",        "I",   "d,A",  0, (int) M_LW, match_never, INSN_MACRO },
-{"not",       "I",   "d,s",  MATCH_XORI | MASK_IMM, MASK_XORI | MASK_IMM, match_opcode, INSN_ALIAS },
-{"ori",       "I",   "d,s,j",  MATCH_ORI, MASK_ORI, match_opcode, 0 },
+{"not",       "I",   "d,s",  MATCH_XORI | MASK_IMM, MASK_XORI | MASK_IMM | MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"ori",       "I",   "d,s,j",  MATCH_ORI, MASK_ORI | MASK_CLIP3, match_opcode, 0 },
 {"or",       "C",   "Cs,Cw,Ct",  MATCH_C_OR, MASK_C_OR, match_opcode, INSN_ALIAS },
 {"or",       "C",   "Cs,Ct,Cw",  MATCH_C_OR, MASK_C_OR, match_opcode, INSN_ALIAS },
-{"or",        "I",   "d,s,t",  MATCH_OR, MASK_OR, match_opcode, 0 },
-{"or",        "I",   "d,s,j",  MATCH_ORI, MASK_ORI, match_opcode, INSN_ALIAS },
-{"auipc",     "I",   "d,u",  MATCH_AUIPC, MASK_AUIPC, match_opcode, 0 },
-{"seqz",      "I",   "d,s",  MATCH_SLTIU | ENCODE_ITYPE_IMM (1), MASK_SLTIU | MASK_IMM, match_opcode, INSN_ALIAS },
-{"snez",      "I",   "d,t",  MATCH_SLTU, MASK_SLTU | MASK_RS1, match_opcode, INSN_ALIAS },
-{"sltz",      "I",   "d,s",  MATCH_SLT, MASK_SLT | MASK_RS2, match_opcode, INSN_ALIAS },
-{"sgtz",      "I",   "d,t",  MATCH_SLT, MASK_SLT | MASK_RS1, match_opcode, INSN_ALIAS },
-{"slti",      "I",   "d,s,j",  MATCH_SLTI, MASK_SLTI, match_opcode, 0 },
-{"slt",       "I",   "d,s,t",  MATCH_SLT, MASK_SLT, match_opcode, 0 },
-{"slt",       "I",   "d,s,j",  MATCH_SLTI, MASK_SLTI, match_opcode, INSN_ALIAS },
-{"sltiu",     "I",   "d,s,j",  MATCH_SLTIU, MASK_SLTIU, match_opcode, 0 },
-{"sltu",      "I",   "d,s,t",  MATCH_SLTU, MASK_SLTU, match_opcode, 0 },
-{"sltu",      "I",   "d,s,j",  MATCH_SLTIU, MASK_SLTIU, match_opcode, INSN_ALIAS },
-{"sgt",       "I",   "d,t,s",  MATCH_SLT, MASK_SLT, match_opcode, INSN_ALIAS },
-{"sgtu",      "I",   "d,t,s",  MATCH_SLTU, MASK_SLTU, match_opcode, INSN_ALIAS },
-{"sb",        "I",   "t,q(s)",  MATCH_SB, MASK_SB, match_opcode, 0 },
+{"or",        "I",   "d,s,t",  MATCH_OR, MASK_OR | MASK_CLIP3, match_opcode, 0 },
+{"or",        "I",   "d,s,j",  MATCH_ORI, MASK_ORI | MASK_CLIP3 , match_opcode, INSN_ALIAS },
+{"auipc",     "I",   "d,u",  MATCH_AUIPC, MASK_AUIPC| MASK_CLIP3, match_opcode, 0 },
+{"seqz",      "I",   "d,s",  MATCH_SLTIU | ENCODE_ITYPE_IMM (1), MASK_SLTIU | MASK_IMM| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"snez",      "I",   "d,t",  MATCH_SLTU, MASK_SLTU | MASK_RS1| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sltz",      "I",   "d,s",  MATCH_SLT, MASK_SLT | MASK_RS2| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sgtz",      "I",   "d,t",  MATCH_SLT, MASK_SLT | MASK_RS1| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"slti",      "I",   "d,s,j",  MATCH_SLTI, MASK_SLTI| MASK_CLIP3, match_opcode, 0 },
+{"slt",       "I",   "d,s,t",  MATCH_SLT, MASK_SLT| MASK_CLIP3, match_opcode, 0 },
+{"slt",       "I",   "d,s,j",  MATCH_SLTI, MASK_SLTI| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sltiu",     "I",   "d,s,j",  MATCH_SLTIU, MASK_SLTIU| MASK_CLIP3, match_opcode, 0 },
+{"sltu",      "I",   "d,s,t",  MATCH_SLTU, MASK_SLTU| MASK_CLIP3, match_opcode, 0 },
+{"sltu",      "I",   "d,s,j",  MATCH_SLTIU, MASK_SLTIU| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sgt",       "I",   "d,t,s",  MATCH_SLT, MASK_SLT| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sgtu",      "I",   "d,t,s",  MATCH_SLTU, MASK_SLTU| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"sb",        "I",   "t,q(s)",  MATCH_SB, MASK_SB| MASK_CLIP3, match_opcode, 0 },
 {"sb",        "I",   "t,A,s",  0, (int) M_SB, match_never, INSN_MACRO },
-{"sh",        "I",   "t,q(s)",  MATCH_SH, MASK_SH, match_opcode, 0 },
+{"sh",        "I",   "t,q(s)",  MATCH_SH, MASK_SH| MASK_CLIP3, match_opcode, 0 },
 {"sh",        "I",   "t,A,s",  0, (int) M_SH, match_never, INSN_MACRO },
-{"sw",        "C",   "CV,CM(Cc)",  MATCH_C_SWSP, MASK_C_SWSP, match_opcode, INSN_ALIAS },
+{"sw",        "C",   "CV,CM(Cc)",  MATCH_C_SWSP, MASK_C_SWSP| MASK_C_6, match_opcode, INSN_ALIAS },
 {"sw",        "C",   "Ct,Ck(Cs)",  MATCH_C_SW, MASK_C_SW, match_opcode, INSN_ALIAS },
-{"sw",        "I",   "t,q(s)",  MATCH_SW, MASK_SW, match_opcode, 0 },
+{"sw",        "I",   "t,q(s)",  MATCH_SW, MASK_SW| MASK_CLIP3, match_opcode, 0 },
 {"sw",        "I",   "t,A,s",  0, (int) M_SW, match_never, INSN_MACRO },
-{"fence",     "I",   "",  MATCH_FENCE | MASK_PRED | MASK_SUCC, MASK_FENCE | MASK_RD | MASK_RS1 | MASK_IMM, match_opcode, INSN_ALIAS },
-{"fence",     "I",   "P,Q",  MATCH_FENCE, MASK_FENCE | MASK_RD | MASK_RS1 | (MASK_IMM & ~MASK_PRED & ~MASK_SUCC), match_opcode, 0 },
-{"fence.i",   "I",   "",  MATCH_FENCE_I, MASK_FENCE | MASK_RD | MASK_RS1 | MASK_IMM, match_opcode, 0 },
+{"fence",     "I",   "",  MATCH_FENCE | MASK_PRED | MASK_SUCC, MASK_FENCE | MASK_RD | MASK_RS1 | MASK_IMM| MASK_CLIP3, match_opcode, INSN_ALIAS },
+{"fence",     "I",   "P,Q",  MATCH_FENCE, MASK_FENCE | MASK_RD | MASK_RS1 | (MASK_IMM & ~MASK_PRED & ~MASK_SUCC)| MASK_CLIP3, match_opcode, 0 },
+{"fence.i",   "I",   "",  MATCH_FENCE_I, MASK_FENCE | MASK_RD | MASK_RS1 | MASK_IMM| MASK_CLIP3, match_opcode, 0 },
 {"rdcycle",   "I",   "d",  MATCH_RDCYCLE, MASK_RDCYCLE, match_opcode, INSN_ALIAS },
 {"rdinstret", "I",   "d",  MATCH_RDINSTRET, MASK_RDINSTRET, match_opcode, INSN_ALIAS },
 {"rdtime",    "I",   "d",  MATCH_RDTIME, MASK_RDTIME, match_opcode, INSN_ALIAS },
@@ -350,11 +380,13 @@
 {"rdtimeh",   "32I", "d",  MATCH_RDTIMEH, MASK_RDTIMEH, match_opcode, INSN_ALIAS },
 {"ecall",     "I",   "",    MATCH_SCALL, MASK_SCALL, match_opcode, 0 },
 {"scall",     "I",   "",    MATCH_SCALL, MASK_SCALL, match_opcode, 0 },
-{"xori",      "I",   "d,s,j",  MATCH_XORI, MASK_XORI, match_opcode, 0 },
+{"xori",      "I",   "d,s,j",  MATCH_XORI, MASK_XORI| MASK_CLIP3, match_opcode, 0 },
 {"xor",       "C",   "Cs,Cw,Ct",  MATCH_C_XOR, MASK_C_XOR, match_opcode, INSN_ALIAS },
 {"xor",       "C",   "Cs,Ct,Cw",  MATCH_C_XOR, MASK_C_XOR, match_opcode, INSN_ALIAS },
-{"xor",       "I",   "d,s,t",  MATCH_XOR, MASK_XOR, match_opcode, 0 },
-{"xor",       "I",   "d,s,j",  MATCH_XORI, MASK_XORI, match_opcode, INSN_ALIAS },
+{"xor",       "I",   "d,s,t",  MATCH_XOR, MASK_XOR| MASK_CLIP3, match_opcode, 0 },
+{"xor",       "I",   "d,s,j",  MATCH_XORI, MASK_XORI| MASK_CLIP3, match_opcode, INSN_ALIAS },
+//=======================================================================================//
+/*
 {"lwu",       "64I", "d,o(s)",  MATCH_LWU, MASK_LWU, match_opcode, 0 },
 {"lwu",       "64I", "d,A",  0, (int) M_LWU, match_never, INSN_MACRO },
 {"ld",        "64C", "d,Cn(Cc)",  MATCH_C_LDSP, MASK_C_LDSP, match_rd_nonzero, INSN_ALIAS },
@@ -375,7 +407,7 @@
 {"addw",      "64I", "d,s,t",  MATCH_ADDW, MASK_ADDW, match_opcode, 0 },
 {"addw",      "64I", "d,s,j",  MATCH_ADDIW, MASK_ADDIW, match_opcode, INSN_ALIAS },
 {"negw",      "64I", "d,t",  MATCH_SUBW, MASK_SUBW | MASK_RS1, match_opcode, INSN_ALIAS }, /* sub 0 */
-{"slliw",     "64I", "d,s,<",   MATCH_SLLIW, MASK_SLLIW, match_opcode, 0 },
+/*{"slliw",     "64I", "d,s,<",   MATCH_SLLIW, MASK_SLLIW, match_opcode, 0 },
 {"sllw",      "64I", "d,s,t",   MATCH_SLLW, MASK_SLLW, match_opcode, 0 },
 {"sllw",      "64I", "d,s,<",   MATCH_SLLIW, MASK_SLLIW, match_opcode, INSN_ALIAS },
 {"srliw",     "64I", "d,s,<",   MATCH_SRLIW, MASK_SRLIW, match_opcode, 0 },
@@ -388,7 +420,7 @@
 {"subw",      "64I", "d,s,t",  MATCH_SUBW, MASK_SUBW, match_opcode, 0 },
 
 /* Atomic memory operation instruction subset */
-{"lr.w",         "A",   "d,0(s)",    MATCH_LR_W, MASK_LR_W | MASK_AQRL, match_opcode, 0 },
+/*{"lr.w",         "A",   "d,0(s)",    MATCH_LR_W, MASK_LR_W | MASK_AQRL, match_opcode, 0 },
 {"sc.w",         "A",   "d,t,0(s)",  MATCH_SC_W, MASK_SC_W | MASK_AQRL, match_opcode, 0 },
 {"amoadd.w",     "A",   "d,t,0(s)",  MATCH_AMOADD_W, MASK_AMOADD_W | MASK_AQRL, match_opcode, 0 },
 {"amoswap.w",    "A",   "d,t,0(s)",  MATCH_AMOSWAP_W, MASK_AMOSWAP_W | MASK_AQRL, match_opcode, 0 },
@@ -478,22 +510,23 @@
 {"amominu.d.aqrl", "64A", "d,t,0(s)",  MATCH_AMOMINU_D | MASK_AQRL, MASK_AMOMINU_D | MASK_AQRL, match_opcode, 0 },
 
 /* Multiply/Divide instruction subset */
-{"mul",       "M",   "d,s,t",  MATCH_MUL, MASK_MUL, match_opcode, 0 },
-{"mulh",      "M",   "d,s,t",  MATCH_MULH, MASK_MULH, match_opcode, 0 },
-{"mulhu",     "M",   "d,s,t",  MATCH_MULHU, MASK_MULHU, match_opcode, 0 },
-{"mulhsu",    "M",   "d,s,t",  MATCH_MULHSU, MASK_MULHSU, match_opcode, 0 },
-{"div",       "M",   "d,s,t",  MATCH_DIV, MASK_DIV, match_opcode, 0 },
-{"divu",      "M",   "d,s,t",  MATCH_DIVU, MASK_DIVU, match_opcode, 0 },
-{"rem",       "M",   "d,s,t",  MATCH_REM, MASK_REM, match_opcode, 0 },
-{"remu",      "M",   "d,s,t",  MATCH_REMU, MASK_REMU, match_opcode, 0 },
-{"mulw",      "64M", "d,s,t",  MATCH_MULW, MASK_MULW, match_opcode, 0 },
+{"mul",       "M",   "d,s,t",  MATCH_MUL, MASK_MUL | MASK_CLIP3, match_opcode, 0 },
+{"mulh",      "M",   "d,s,t",  MATCH_MULH, MASK_MULH | MASK_CLIP3, match_opcode, 0 },
+{"mulhu",     "M",   "d,s,t",  MATCH_MULHU, MASK_MULHU | MASK_CLIP3, match_opcode, 0 },
+{"mulhsu",    "M",   "d,s,t",  MATCH_MULHSU, MASK_MULHSU | MASK_CLIP3, match_opcode, 0 },
+{"div",       "M",   "d,s,t",  MATCH_DIV, MASK_DIV | MASK_CLIP3, match_opcode, 0 },
+{"divu",      "M",   "d,s,t",  MATCH_DIVU, MASK_DIVU | MASK_CLIP3, match_opcode, 0 },
+{"rem",       "M",   "d,s,t",  MATCH_REM, MASK_REM | MASK_CLIP3, match_opcode, 0 },
+{"remu",      "M",   "d,s,t",  MATCH_REMU, MASK_REMU | MASK_CLIP3, match_opcode, 0 },
+
+/*{"mulw",      "64M", "d,s,t",  MATCH_MULW, MASK_MULW, match_opcode, 0 },
 {"divw",      "64M", "d,s,t",  MATCH_DIVW, MASK_DIVW, match_opcode, 0 },
 {"divuw",     "64M", "d,s,t",  MATCH_DIVUW, MASK_DIVUW, match_opcode, 0 },
 {"remw",      "64M", "d,s,t",  MATCH_REMW, MASK_REMW, match_opcode, 0 },
 {"remuw",     "64M", "d,s,t",  MATCH_REMUW, MASK_REMUW, match_opcode, 0 },
 
 /* Single-precision floating-point instruction subset */
-{"frsr",      "F",   "d",  MATCH_FRCSR, MASK_FRCSR, match_opcode, 0 },
+/*{"frsr",      "F",   "d",  MATCH_FRCSR, MASK_FRCSR, match_opcode, 0 },
 {"fssr",      "F",   "s",  MATCH_FSCSR, MASK_FSCSR | MASK_RD, match_opcode, 0 },
 {"fssr",      "F",   "d,s",  MATCH_FSCSR, MASK_FSCSR, match_opcode, 0 },
 {"frcsr",     "F",   "d",  MATCH_FRCSR, MASK_FRCSR, match_opcode, 0 },
@@ -574,7 +607,7 @@
 {"fcvt.s.lu", "64F", "D,s,m",  MATCH_FCVT_S_LU, MASK_FCVT_S_LU, match_opcode, 0 },
 
 /* Double-precision floating-point instruction subset */
-{"fld",       "C",   "D,Cn(Cc)",  MATCH_C_FLDSP, MASK_C_FLDSP, match_opcode, INSN_ALIAS },
+/*{"fld",       "C",   "D,Cn(Cc)",  MATCH_C_FLDSP, MASK_C_FLDSP, match_opcode, INSN_ALIAS },
 {"fld",       "C",   "CD,Cl(Cs)",  MATCH_C_FLD, MASK_C_FLD, match_opcode, INSN_ALIAS },
 {"fld",       "D",   "D,o(s)",  MATCH_FLD, MASK_FLD, match_opcode, 0 },
 {"fld",       "D",   "D,A,s",  0, (int) M_FLD, match_never, INSN_MACRO },
@@ -635,7 +668,7 @@
 {"fcvt.d.lu", "64D", "D,s,m",  MATCH_FCVT_D_LU, MASK_FCVT_D_LU, match_opcode, 0 },
 
 /* Quad-precision floating-point instruction subset */
-{"flq",       "Q",   "D,o(s)",  MATCH_FLQ, MASK_FLQ, match_opcode, 0 },
+/*{"flq",       "Q",   "D,o(s)",  MATCH_FLQ, MASK_FLQ, match_opcode, 0 },
 {"flq",       "Q",   "D,A,s",  0, (int) M_FLQ, match_never, INSN_MACRO },
 {"fsq",       "Q",   "T,q(s)",  MATCH_FSQ, MASK_FSQ, match_opcode, 0 },
 {"fsq",       "Q",   "T,A,s",  0, (int) M_FSQ, match_never, INSN_MACRO },
@@ -695,66 +728,68 @@
 {"fcvt.q.lu", "64Q", "D,s,m",  MATCH_FCVT_Q_LU, MASK_FCVT_Q_LU, match_opcode, 0 },
 
 /* Compressed instructions.  */
-{"c.ebreak",  "C",   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, 0 },
-{"c.jr",      "C",   "d",  MATCH_C_JR, MASK_C_JR, match_rd_nonzero, 0 },
-{"c.jalr",    "C",   "d",  MATCH_C_JALR, MASK_C_JALR, match_rd_nonzero, 0 },
-{"c.j",       "C",   "Ca",  MATCH_C_J, MASK_C_J, match_opcode, 0 },
-{"c.jal",     "32C", "Ca",  MATCH_C_JAL, MASK_C_JAL, match_opcode, 0 },
-{"c.beqz",    "C",   "Cs,Cp",  MATCH_C_BEQZ, MASK_C_BEQZ, match_opcode, 0 },
-{"c.bnez",    "C",   "Cs,Cp",  MATCH_C_BNEZ, MASK_C_BNEZ, match_opcode, 0 },
-{"c.lwsp",    "C",   "d,Cm(Cc)",  MATCH_C_LWSP, MASK_C_LWSP, match_rd_nonzero, 0 },
-{"c.lw",      "C",   "Ct,Ck(Cs)",  MATCH_C_LW, MASK_C_LW, match_opcode, 0 },
-{"c.swsp",    "C",   "CV,CM(Cc)",  MATCH_C_SWSP, MASK_C_SWSP, match_opcode, 0 },
-{"c.sw",      "C",   "Ct,Ck(Cs)",  MATCH_C_SW, MASK_C_SW, match_opcode, 0 },
-{"c.nop",     "C",   "",  MATCH_C_ADDI, 0xffff, match_opcode, INSN_ALIAS },
-{"c.nop",     "C",   "Cj",  MATCH_C_ADDI, MASK_C_ADDI | MASK_RD, match_opcode, INSN_ALIAS },
-{"c.mv",      "C",   "d,CV",  MATCH_C_MV, MASK_C_MV, match_c_add_with_hint, 0 },
-{"c.lui",     "C",   "d,Cu",  MATCH_C_LUI, MASK_C_LUI, match_c_lui_with_hint, 0 },
-{"c.li",      "C",   "d,Co",  MATCH_C_LI, MASK_C_LI, match_opcode, 0 },
-{"c.addi4spn","C",   "Ct,Cc,CK", MATCH_C_ADDI4SPN, MASK_C_ADDI4SPN, match_c_addi4spn, 0 },
-{"c.addi16sp","C",   "Cc,CL", MATCH_C_ADDI16SP, MASK_C_ADDI16SP, match_c_addi16sp, 0 },
-{"c.addi",    "C",   "d,Co",  MATCH_C_ADDI, MASK_C_ADDI, match_opcode, 0 },
-{"c.add",     "C",   "d,CV",  MATCH_C_ADD, MASK_C_ADD, match_c_add_with_hint, 0 },
-{"c.sub",     "C",   "Cs,Ct",  MATCH_C_SUB, MASK_C_SUB, match_opcode, 0 },
-{"c.and",     "C",   "Cs,Ct",  MATCH_C_AND, MASK_C_AND, match_opcode, 0 },
-{"c.or",      "C",   "Cs,Ct",  MATCH_C_OR, MASK_C_OR, match_opcode, 0 },
-{"c.xor",     "C",   "Cs,Ct",  MATCH_C_XOR, MASK_C_XOR, match_opcode, 0 },
-{"c.slli",    "C",   "d,C>",  MATCH_C_SLLI, MASK_C_SLLI, match_c_slli, 0 },
-{"c.srli",    "C",   "Cs,C>",  MATCH_C_SRLI, MASK_C_SRLI, match_c_slli, 0 },
-{"c.srai",    "C",   "Cs,C>",  MATCH_C_SRAI, MASK_C_SRAI, match_c_slli, 0 },
-{"c.slli64",  "C",   "d",  MATCH_C_SLLI64, MASK_C_SLLI64, match_c_slli64, 0 },
-{"c.srli64",  "C",   "Cs",  MATCH_C_SRLI64, MASK_C_SRLI64, match_c_slli64, 0 },
-{"c.srai64",  "C",   "Cs",  MATCH_C_SRAI64, MASK_C_SRAI64, match_c_slli64, 0 },
-{"c.andi",    "C",   "Cs,Co",  MATCH_C_ANDI, MASK_C_ANDI, match_opcode, 0 },
-{"c.addiw",   "64C", "d,Co",  MATCH_C_ADDIW, MASK_C_ADDIW, match_rd_nonzero, 0 },
-{"c.addw",    "64C", "Cs,Ct",  MATCH_C_ADDW, MASK_C_ADDW, match_opcode, 0 },
-{"c.subw",    "64C", "Cs,Ct",  MATCH_C_SUBW, MASK_C_SUBW, match_opcode, 0 },
-{"c.ldsp",    "64C", "d,Cn(Cc)",  MATCH_C_LDSP, MASK_C_LDSP, match_rd_nonzero, 0 },
-{"c.ld",      "64C", "Ct,Cl(Cs)",  MATCH_C_LD, MASK_C_LD, match_opcode, 0 },
-{"c.sdsp",    "64C", "CV,CN(Cc)",  MATCH_C_SDSP, MASK_C_SDSP, match_opcode, 0 },
-{"c.sd",      "64C", "Ct,Cl(Cs)",  MATCH_C_SD, MASK_C_SD, match_opcode, 0 },
-{"c.fldsp",   "C",   "D,Cn(Cc)",  MATCH_C_FLDSP, MASK_C_FLDSP, match_opcode, 0 },
-{"c.fld",     "C",   "CD,Cl(Cs)",  MATCH_C_FLD, MASK_C_FLD, match_opcode, 0 },
-{"c.fsdsp",   "C",   "CT,CN(Cc)",  MATCH_C_FSDSP, MASK_C_FSDSP, match_opcode, 0 },
-{"c.fsd",     "C",   "CD,Cl(Cs)",  MATCH_C_FSD, MASK_C_FSD, match_opcode, 0 },
-{"c.flwsp",   "32C", "D,Cm(Cc)",  MATCH_C_FLWSP, MASK_C_FLWSP, match_opcode, 0 },
-{"c.flw",     "32C", "CD,Ck(Cs)",  MATCH_C_FLW, MASK_C_FLW, match_opcode, 0 },
-{"c.fswsp",   "32C", "CT,CM(Cc)",  MATCH_C_FSWSP, MASK_C_FSWSP, match_opcode, 0 },
-{"c.fsw",     "32C", "CD,Ck(Cs)",  MATCH_C_FSW, MASK_C_FSW, match_opcode, 0 },
+  {"c.ebreak",  "C",   "",  MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, 0 },
+  {"c.jr",      "C",   "Cd",  MATCH_C_JR, MASK_C_JR | MASK_C_11, match_crd_nonzero, 0 },
+  {"c.jalr",    "C",   "Cd",  MATCH_C_JALR, MASK_C_JALR| MASK_C_11, match_crd_nonzero, 0 },
+  {"c.j",       "C",   "Ca",  MATCH_C_J, MASK_C_J, match_opcode, 0 },
+  {"c.jal",     "32C", "Ca",  MATCH_C_JAL, MASK_C_JAL, match_opcode, 0 },
+  {"c.beqz",    "C",   "Cs,Cp",  MATCH_C_BEQZ, MASK_C_BEQZ, match_opcode, 0 },
+  {"c.bnez",    "C",   "Cs,Cp",  MATCH_C_BNEZ, MASK_C_BNEZ, match_opcode, 0 },
+  {"c.lwsp",    "C",   "Cd,Cm(Cc)",  MATCH_C_LWSP, MASK_C_LWSP| MASK_C_11, match_rd_nonzero, 0 },
+  {"c.lw",      "C",   "Ct,Ck(Cs)",  MATCH_C_LW, MASK_C_LW, match_opcode, 0 },
+  {"c.swsp",    "C",   "CV,CM(Cc)",  MATCH_C_SWSP, MASK_C_SWSP | MASK_C_6, match_opcode, 0 },
+  {"c.sw",      "C",   "Ct,Ck(Cs)",  MATCH_C_SW, MASK_C_SW, match_opcode, 0 },
+  {"c.nop",     "C",   "",  MATCH_C_ADDI, 0xffff, match_opcode, INSN_ALIAS },
+//{"c.nop",     "C",   "Cj",  MATCH_C_ADDI, MASK_C_ADDI | MASK_RD | , match_opcode, INSN_ALIAS },
+  {"c.mv",      "C",   "Cd,CV",  MATCH_C_MV, MASK_C_MV | MASK_C_11 | MASK_C_6, match_c_add_with_hint, 0 },
+  {"c.lui",     "C",   "Cd,Cu",  MATCH_C_LUI, MASK_C_LUI | MASK_C_11, match_c_lui_with_hint, 0 },
+  {"c.li",      "C",   "Cd,Co",  MATCH_C_LI, MASK_C_LI | MASK_C_11, match_opcode, 0 },
+  {"c.addi4spn","C",   "Ct,Cc,CK", MATCH_C_ADDI4SPN, MASK_C_ADDI4SPN, match_c_addi4spn, 0 },
+  {"c.addi16sp","C",   "Cc,CL", MATCH_C_ADDI16SP, MASK_C_ADDI16SP, match_c_addi16sp, 0 },
+  { "c.addi",    "C",   "Cd,Co",  MATCH_C_ADDI, MASK_C_ADDI | MASK_C_11, match_opcode, 0 },
+  {"c.add",     "C",   "Cd,CV",  MATCH_C_ADD, MASK_C_ADD | MASK_C_11 | MASK_C_6, match_c_add_with_hint, 0 },
+  {"c.sub",     "C",   "Cs,Ct",  MATCH_C_SUB, MASK_C_SUB, match_opcode, 0 },
+  {"c.and",     "C",   "Cs,Ct",  MATCH_C_AND, MASK_C_AND, match_opcode, 0 },
+  {"c.or",      "C",   "Cs,Ct",  MATCH_C_OR, MASK_C_OR, match_opcode, 0 },
+  {"c.xor",     "C",   "Cs,Ct",  MATCH_C_XOR, MASK_C_XOR, match_opcode, 0 },
+  {"c.slli",    "C",   "Cd,C>",  MATCH_C_SLLI, MASK_C_SLLI| MASK_C_11, match_c_slli, 0 },
+  {"c.srli",    "C",   "Cs,C>",  MATCH_C_SRLI, MASK_C_SRLI, match_c_slli, 0 },
+  {"c.srai",    "C",   "Cs,C>",  MATCH_C_SRAI, MASK_C_SRAI, match_c_slli, 0 },
+//{"c.slli64",  "C",   "d",  MATCH_C_SLLI64, MASK_C_SLLI64, match_c_slli64, 0 },
+//{"c.srli64",  "C",   "Cs",  MATCH_C_SRLI64, MASK_C_SRLI64, match_c_slli64, 0 },
+//{"c.srai64",  "C",   "Cs",  MATCH_C_SRAI64, MASK_C_SRAI64, match_c_slli64, 0 },
+  {"c.andi",    "C",   "Cs,Co",  MATCH_C_ANDI, MASK_C_ANDI, match_opcode, 0 },
+//{"c.addiw",   "64C", "d,Co",  MATCH_C_ADDIW, MASK_C_ADDIW, match_rd_nonzero, 0 },
+//{"c.addw",    "64C", "Cs,Ct",  MATCH_C_ADDW, MASK_C_ADDW, match_opcode, 0 },
+//{"c.subw",    "64C", "Cs,Ct",  MATCH_C_SUBW, MASK_C_SUBW, match_opcode, 0 },
+//{"c.ldsp",    "64C", "d,Cn(Cc)",  MATCH_C_LDSP, MASK_C_LDSP, match_rd_nonzero, 0 },
+//{"c.ld",      "64C", "Ct,Cl(Cs)",  MATCH_C_LD, MASK_C_LD, match_opcode, 0 },
+//{"c.sdsp",    "64C", "CV,CN(Cc)",  MATCH_C_SDSP, MASK_C_SDSP, match_opcode, 0 },
+//{"c.sd",      "64C", "Ct,Cl(Cs)",  MATCH_C_SD, MASK_C_SD, match_opcode, 0 },
+//{"c.fldsp",   "C",   "D,Cn(Cc)",  MATCH_C_FLDSP, MASK_C_FLDSP, match_opcode, 0 },
+//{"c.fld",     "C",   "CD,Cl(Cs)",  MATCH_C_FLD, MASK_C_FLD, match_opcode, 0 },
+//{"c.fsdsp",   "C",   "CT,CN(Cc)",  MATCH_C_FSDSP, MASK_C_FSDSP, match_opcode, 0 },
+//{"c.fsd",     "C",   "CD,Cl(Cs)",  MATCH_C_FSD, MASK_C_FSD, match_opcode, 0 },
+//{"c.flwsp",   "32C", "D,Cm(Cc)",  MATCH_C_FLWSP, MASK_C_FLWSP, match_opcode, 0 },
+//{"c.flw",     "32C", "CD,Ck(Cs)",  MATCH_C_FLW, MASK_C_FLW, match_opcode, 0 },
+//{"c.fswsp",   "32C", "CT,CM(Cc)",  MATCH_C_FSWSP, MASK_C_FSWSP, match_opcode, 0 },
+//{"c.fsw",     "32C", "CD,Ck(Cs)",  MATCH_C_FSW, MASK_C_FSW, match_opcode, 0 },
+//////////////////////////////////////////////////////////////////////////////////////////////
+
 
 /* Supervisor instructions */
 {"csrr",      "I",   "d,E",  MATCH_CSRRS, MASK_CSRRS | MASK_RS1, match_opcode, INSN_ALIAS },
-{"csrwi",     "I",   "E,Z",  MATCH_CSRRWI, MASK_CSRRWI | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrsi",     "I",   "E,Z",  MATCH_CSRRSI, MASK_CSRRSI | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrci",     "I",   "E,Z",  MATCH_CSRRCI, MASK_CSRRCI | MASK_RD, match_opcode, INSN_ALIAS },
+{"csrwi",     "I",   "E,Z",  MATCH_CSRRWI, MASK_CSRRWI | MASK_RD , match_opcode, INSN_ALIAS },
+{"csrsi",     "I",   "E,Z",  MATCH_CSRRSI, MASK_CSRRSI | MASK_RD , match_opcode, INSN_ALIAS },
+{"csrci",     "I",   "E,Z",  MATCH_CSRRCI, MASK_CSRRCI | MASK_RD , match_opcode, INSN_ALIAS },
 {"csrw",      "I",   "E,s",  MATCH_CSRRW, MASK_CSRRW | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrw",      "I",   "E,Z",  MATCH_CSRRWI, MASK_CSRRWI | MASK_RD, match_opcode, INSN_ALIAS },
+{"csrw",      "I",   "E,Z",  MATCH_CSRRWI, MASK_CSRRWI | MASK_RD , match_opcode, INSN_ALIAS },
 {"csrs",      "I",   "E,s",  MATCH_CSRRS, MASK_CSRRS | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrs",      "I",   "E,Z",  MATCH_CSRRSI, MASK_CSRRSI | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrc",      "I",   "E,s",  MATCH_CSRRC, MASK_CSRRC | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrc",      "I",   "E,Z",  MATCH_CSRRCI, MASK_CSRRCI | MASK_RD, match_opcode, INSN_ALIAS },
-{"csrrwi",    "I",   "d,E,Z",  MATCH_CSRRWI, MASK_CSRRWI, match_opcode, 0 },
-{"csrrsi",    "I",   "d,E,Z",  MATCH_CSRRSI, MASK_CSRRSI, match_opcode, 0 },
+{"csrs",      "I",   "E,Z",  MATCH_CSRRSI, MASK_CSRRSI | MASK_RD , match_opcode, INSN_ALIAS },
+{"csrc",      "I",   "E,s",  MATCH_CSRRC, MASK_CSRRC | MASK_RD , match_opcode, INSN_ALIAS },
+{"csrc",      "I",   "E,Z",  MATCH_CSRRCI, MASK_CSRRCI | MASK_RD , match_opcode, INSN_ALIAS },
+{"csrrwi",    "I",   "d,E,Z",  MATCH_CSRRWI, MASK_CSRRWI, match_opcode, 0 },	
+{"csrrsi",    "I",   "d,E,Z",  MATCH_CSRRSI, MASK_CSRRSI , match_opcode, 0 },
 {"csrrci",    "I",   "d,E,Z",  MATCH_CSRRCI, MASK_CSRRCI, match_opcode, 0 },
 {"csrrw",     "I",   "d,E,s",  MATCH_CSRRW, MASK_CSRRW, match_opcode, 0 },
 {"csrrw",     "I",   "d,E,Z",  MATCH_CSRRWI, MASK_CSRRWI, match_opcode, INSN_ALIAS },
@@ -762,17 +797,18 @@
 {"csrrs",     "I",   "d,E,Z",  MATCH_CSRRSI, MASK_CSRRSI, match_opcode, INSN_ALIAS },
 {"csrrc",     "I",   "d,E,s",  MATCH_CSRRC, MASK_CSRRC, match_opcode, 0 },
 {"csrrc",     "I",   "d,E,Z",  MATCH_CSRRCI, MASK_CSRRCI, match_opcode, INSN_ALIAS },
-{"uret",      "I",   "",     MATCH_URET, MASK_URET, match_opcode, 0 },
-{"sret",      "I",   "",     MATCH_SRET, MASK_SRET, match_opcode, 0 },
-{"hret",      "I",   "",     MATCH_HRET, MASK_HRET, match_opcode, 0 },
-{"mret",      "I",   "",     MATCH_MRET, MASK_MRET, match_opcode, 0 },
-{"dret",      "I",   "",     MATCH_DRET, MASK_DRET, match_opcode, 0 },
-{"sfence.vm", "I",   "",     MATCH_SFENCE_VM, MASK_SFENCE_VM | MASK_RS1, match_opcode, 0 },
-{"sfence.vm", "I",   "s",    MATCH_SFENCE_VM, MASK_SFENCE_VM, match_opcode, 0 },
-{"sfence.vma","I",   "",     MATCH_SFENCE_VMA, MASK_SFENCE_VMA | MASK_RS1 | MASK_RS2, match_opcode, INSN_ALIAS },
-{"sfence.vma","I",   "s",    MATCH_SFENCE_VMA, MASK_SFENCE_VMA | MASK_RS2, match_opcode, INSN_ALIAS },
-{"sfence.vma","I",   "s,t",  MATCH_SFENCE_VMA, MASK_SFENCE_VMA, match_opcode, 0 },
-{"wfi",       "I",   "",     MATCH_WFI, MASK_WFI, match_opcode, 0 },
+
+//{"uret",      "I",   "",     MATCH_URET, MASK_URET, match_opcode, 0 },
+//{"sret",      "I",   "",     MATCH_SRET, MASK_SRET, match_opcode, 0 },
+//{"hret",      "I",   "",     MATCH_HRET, MASK_HRET, match_opcode, 0 },
+{"mret",      "I",   "",     MATCH_MRET, MASK_MRET, match_opcode,  0 },/* lisc */
+//{"dret",      "I",   "",     MATCH_DRET, MASK_DRET, match_opcode, 0 },
+//{"sfence.vm", "I",   "",     MATCH_SFENCE_VM, MASK_SFENCE_VM | MASK_RS1, match_opcode, 0 },
+//{"sfence.vm", "I",   "s",    MATCH_SFENCE_VM, MASK_SFENCE_VM, match_opcode, 0 },
+//{"sfence.vma","I",   "",     MATCH_SFENCE_VMA, MASK_SFENCE_VMA | MASK_RS1 | MASK_RS2, match_opcode, INSN_ALIAS },
+//{"sfence.vma","I",   "s",    MATCH_SFENCE_VMA, MASK_SFENCE_VMA | MASK_RS2, match_opcode, INSN_ALIAS },
+//{"sfence.vma","I",   "s,t",  MATCH_SFENCE_VMA, MASK_SFENCE_VMA, match_opcode, 0 },
+{"wfi",       "I",   "",     MATCH_WFI, MASK_WFI, match_opcode, 0 }, /*lisc */
 
 /* Terminate the list.  */
 {0, 0, 0, 0, 0, 0, 0}
@@ -782,7 +818,7 @@
 const struct riscv_opcode riscv_insn_types[] =
 {
 /* name,  isa,          operands, match, mask,    match_func, pinfo.  */
-{"r",     "I",  "O4,F3,F7,d,s,t",     0,    0,  match_opcode, 0 },
+/*{"r",     "I",  "O4,F3,F7,d,s,t",     0,    0,  match_opcode, 0 },
 {"r",     "I",  "O4,F3,F7,D,s,t",     0,    0,  match_opcode, 0 },
 {"r",     "I",  "O4,F3,F7,d,S,t",     0,    0,  match_opcode, 0 },
 {"r",     "I",  "O4,F3,F7,D,S,t",     0,    0,  match_opcode, 0 },
@@ -848,6 +884,7 @@
 {"cb",    "C",  "O2,CF3,CS,Cp",       0,    0,  match_opcode, 0 },
 
 {"cj",    "C",  "O2,CF3,Ca",          0,    0,  match_opcode, 0 },
+*/
 /* Terminate the list.  */
 {0, 0, 0, 0, 0, 0, 0}
 };
